<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Vortice.DXGI</name>
    </assembly>
    <members>
        <member name="T:Vortice.DXGI.Debug.IDXGIInfoQueue">
            <unmanaged>IDXGIInfoQueue</unmanaged>
            <unmanaged-short>IDXGIInfoQueue</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.Debug.IDXGIInfoQueue.SetMessageCountLimit(System.Guid,System.UInt64)">
            <unmanaged>HRESULT IDXGIInfoQueue::SetMessageCountLimit([In] GUID Producer, [In] unsigned long long MessageCountLimit)</unmanaged>
            <unmanaged-short>IDXGIInfoQueue::SetMessageCountLimit</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.Debug.IDXGIInfoQueue.ClearStoredMessages(System.Guid)">
            <unmanaged>void IDXGIInfoQueue::ClearStoredMessages([In] GUID Producer)</unmanaged>
            <unmanaged-short>IDXGIInfoQueue::ClearStoredMessages</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.Debug.IDXGIInfoQueue.GetMessage(System.Guid,System.UInt64,System.IntPtr,SharpGen.Runtime.PointerSize@)">
            <unmanaged>HRESULT IDXGIInfoQueue::GetMessageW([In] GUID Producer, [In] unsigned long long MessageIndex, [In] DXGI_INFO_QUEUE_MESSAGE* pMessage, [InOut] SIZE_T* pMessageByteLength)</unmanaged>
            <unmanaged-short>IDXGIInfoQueue::GetMessageW</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.Debug.IDXGIInfoQueue.GetNumStoredMessagesAllowedByRetrievalFilters(System.Guid)">
            <unmanaged>unsigned long long IDXGIInfoQueue::GetNumStoredMessagesAllowedByRetrievalFilters([In] GUID Producer)</unmanaged>
            <unmanaged-short>IDXGIInfoQueue::GetNumStoredMessagesAllowedByRetrievalFilters</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.Debug.IDXGIInfoQueue.GetNumStoredMessages(System.Guid)">
            <unmanaged>unsigned long long IDXGIInfoQueue::GetNumStoredMessages([In] GUID Producer)</unmanaged>
            <unmanaged-short>IDXGIInfoQueue::GetNumStoredMessages</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.Debug.IDXGIInfoQueue.GetNumMessagesDiscardedByMessageCountLimit(System.Guid)">
            <unmanaged>unsigned long long IDXGIInfoQueue::GetNumMessagesDiscardedByMessageCountLimit([In] GUID Producer)</unmanaged>
            <unmanaged-short>IDXGIInfoQueue::GetNumMessagesDiscardedByMessageCountLimit</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.Debug.IDXGIInfoQueue.GetMessageCountLimit(System.Guid)">
            <unmanaged>unsigned long long IDXGIInfoQueue::GetMessageCountLimit([In] GUID Producer)</unmanaged>
            <unmanaged-short>IDXGIInfoQueue::GetMessageCountLimit</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.Debug.IDXGIInfoQueue.GetNumMessagesAllowedByStorageFilter(System.Guid)">
            <unmanaged>unsigned long long IDXGIInfoQueue::GetNumMessagesAllowedByStorageFilter([In] GUID Producer)</unmanaged>
            <unmanaged-short>IDXGIInfoQueue::GetNumMessagesAllowedByStorageFilter</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.Debug.IDXGIInfoQueue.GetNumMessagesDeniedByStorageFilter(System.Guid)">
            <unmanaged>unsigned long long IDXGIInfoQueue::GetNumMessagesDeniedByStorageFilter([In] GUID Producer)</unmanaged>
            <unmanaged-short>IDXGIInfoQueue::GetNumMessagesDeniedByStorageFilter</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.Debug.IDXGIInfoQueue.AddStorageFilterEntries(System.Guid,Vortice.DXGI.Debug.InfoQueueFilter)">
            <unmanaged>HRESULT IDXGIInfoQueue::AddStorageFilterEntries([In] GUID Producer, [In] DXGI_INFO_QUEUE_FILTER* pFilter)</unmanaged>
            <unmanaged-short>IDXGIInfoQueue::AddStorageFilterEntries</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.Debug.IDXGIInfoQueue.GetStorageFilter(System.Guid,System.IntPtr,SharpGen.Runtime.PointerSize@)">
            <unmanaged>HRESULT IDXGIInfoQueue::GetStorageFilter([In] GUID Producer, [In] DXGI_INFO_QUEUE_FILTER* pFilter, [InOut] SIZE_T* pFilterByteLength)</unmanaged>
            <unmanaged-short>IDXGIInfoQueue::GetStorageFilter</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.Debug.IDXGIInfoQueue.ClearStorageFilter(System.Guid)">
            <unmanaged>void IDXGIInfoQueue::ClearStorageFilter([In] GUID Producer)</unmanaged>
            <unmanaged-short>IDXGIInfoQueue::ClearStorageFilter</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.Debug.IDXGIInfoQueue.PushEmptyStorageFilter(System.Guid)">
            <unmanaged>HRESULT IDXGIInfoQueue::PushEmptyStorageFilter([In] GUID Producer)</unmanaged>
            <unmanaged-short>IDXGIInfoQueue::PushEmptyStorageFilter</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.Debug.IDXGIInfoQueue.PushDenyAllStorageFilter(System.Guid)">
            <unmanaged>HRESULT IDXGIInfoQueue::PushDenyAllStorageFilter([In] GUID Producer)</unmanaged>
            <unmanaged-short>IDXGIInfoQueue::PushDenyAllStorageFilter</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.Debug.IDXGIInfoQueue.PushCopyOfStorageFilter(System.Guid)">
            <unmanaged>HRESULT IDXGIInfoQueue::PushCopyOfStorageFilter([In] GUID Producer)</unmanaged>
            <unmanaged-short>IDXGIInfoQueue::PushCopyOfStorageFilter</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.Debug.IDXGIInfoQueue.PushStorageFilter(System.Guid,Vortice.DXGI.Debug.InfoQueueFilter)">
            <unmanaged>HRESULT IDXGIInfoQueue::PushStorageFilter([In] GUID Producer, [In] DXGI_INFO_QUEUE_FILTER* pFilter)</unmanaged>
            <unmanaged-short>IDXGIInfoQueue::PushStorageFilter</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.Debug.IDXGIInfoQueue.PopStorageFilter(System.Guid)">
            <unmanaged>void IDXGIInfoQueue::PopStorageFilter([In] GUID Producer)</unmanaged>
            <unmanaged-short>IDXGIInfoQueue::PopStorageFilter</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.Debug.IDXGIInfoQueue.GetStorageFilterStackSize(System.Guid)">
            <unmanaged>UINT IDXGIInfoQueue::GetStorageFilterStackSize([In] GUID Producer)</unmanaged>
            <unmanaged-short>IDXGIInfoQueue::GetStorageFilterStackSize</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.Debug.IDXGIInfoQueue.AddRetrievalFilterEntries(System.Guid,Vortice.DXGI.Debug.InfoQueueFilter)">
            <unmanaged>HRESULT IDXGIInfoQueue::AddRetrievalFilterEntries([In] GUID Producer, [In] DXGI_INFO_QUEUE_FILTER* pFilter)</unmanaged>
            <unmanaged-short>IDXGIInfoQueue::AddRetrievalFilterEntries</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.Debug.IDXGIInfoQueue.GetRetrievalFilter(System.Guid,System.IntPtr,SharpGen.Runtime.PointerSize@)">
            <unmanaged>HRESULT IDXGIInfoQueue::GetRetrievalFilter([In] GUID Producer, [In] DXGI_INFO_QUEUE_FILTER* pFilter, [InOut] SIZE_T* pFilterByteLength)</unmanaged>
            <unmanaged-short>IDXGIInfoQueue::GetRetrievalFilter</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.Debug.IDXGIInfoQueue.ClearRetrievalFilter(System.Guid)">
            <unmanaged>void IDXGIInfoQueue::ClearRetrievalFilter([In] GUID Producer)</unmanaged>
            <unmanaged-short>IDXGIInfoQueue::ClearRetrievalFilter</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.Debug.IDXGIInfoQueue.PushEmptyRetrievalFilter(System.Guid)">
            <unmanaged>HRESULT IDXGIInfoQueue::PushEmptyRetrievalFilter([In] GUID Producer)</unmanaged>
            <unmanaged-short>IDXGIInfoQueue::PushEmptyRetrievalFilter</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.Debug.IDXGIInfoQueue.PushDenyAllRetrievalFilter(System.Guid)">
            <unmanaged>HRESULT IDXGIInfoQueue::PushDenyAllRetrievalFilter([In] GUID Producer)</unmanaged>
            <unmanaged-short>IDXGIInfoQueue::PushDenyAllRetrievalFilter</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.Debug.IDXGIInfoQueue.PushCopyOfRetrievalFilter(System.Guid)">
            <unmanaged>HRESULT IDXGIInfoQueue::PushCopyOfRetrievalFilter([In] GUID Producer)</unmanaged>
            <unmanaged-short>IDXGIInfoQueue::PushCopyOfRetrievalFilter</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.Debug.IDXGIInfoQueue.PushRetrievalFilter(System.Guid,Vortice.DXGI.Debug.InfoQueueFilter)">
            <unmanaged>HRESULT IDXGIInfoQueue::PushRetrievalFilter([In] GUID Producer, [In] DXGI_INFO_QUEUE_FILTER* pFilter)</unmanaged>
            <unmanaged-short>IDXGIInfoQueue::PushRetrievalFilter</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.Debug.IDXGIInfoQueue.PopRetrievalFilter(System.Guid)">
            <unmanaged>void IDXGIInfoQueue::PopRetrievalFilter([In] GUID Producer)</unmanaged>
            <unmanaged-short>IDXGIInfoQueue::PopRetrievalFilter</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.Debug.IDXGIInfoQueue.GetRetrievalFilterStackSize(System.Guid)">
            <unmanaged>UINT IDXGIInfoQueue::GetRetrievalFilterStackSize([In] GUID Producer)</unmanaged>
            <unmanaged-short>IDXGIInfoQueue::GetRetrievalFilterStackSize</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.Debug.IDXGIInfoQueue.AddMessage(System.Guid,Vortice.DXGI.Debug.InfoQueueMessageCategory,Vortice.DXGI.Debug.InfoQueueMessageSeverity,System.Int32,System.String)">
            <unmanaged>HRESULT IDXGIInfoQueue::AddMessage([In] GUID Producer, [In] DXGI_INFO_QUEUE_MESSAGE_CATEGORY Category, [In] DXGI_INFO_QUEUE_MESSAGE_SEVERITY Severity, [In] int ID, [In] const char* pDescription)</unmanaged>
            <unmanaged-short>IDXGIInfoQueue::AddMessage</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.Debug.IDXGIInfoQueue.AddApplicationMessage(Vortice.DXGI.Debug.InfoQueueMessageSeverity,System.String)">
            <unmanaged>HRESULT IDXGIInfoQueue::AddApplicationMessage([In] DXGI_INFO_QUEUE_MESSAGE_SEVERITY Severity, [In] const char* pDescription)</unmanaged>
            <unmanaged-short>IDXGIInfoQueue::AddApplicationMessage</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.Debug.IDXGIInfoQueue.SetBreakOnCategory(System.Guid,Vortice.DXGI.Debug.InfoQueueMessageCategory,SharpGen.Runtime.RawBool)">
            <unmanaged>HRESULT IDXGIInfoQueue::SetBreakOnCategory([In] GUID Producer, [In] DXGI_INFO_QUEUE_MESSAGE_CATEGORY Category, [In] BOOL bEnable)</unmanaged>
            <unmanaged-short>IDXGIInfoQueue::SetBreakOnCategory</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.Debug.IDXGIInfoQueue.SetBreakOnSeverity(System.Guid,Vortice.DXGI.Debug.InfoQueueMessageSeverity,SharpGen.Runtime.RawBool)">
            <unmanaged>HRESULT IDXGIInfoQueue::SetBreakOnSeverity([In] GUID Producer, [In] DXGI_INFO_QUEUE_MESSAGE_SEVERITY Severity, [In] BOOL bEnable)</unmanaged>
            <unmanaged-short>IDXGIInfoQueue::SetBreakOnSeverity</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.Debug.IDXGIInfoQueue.SetBreakOnID(System.Guid,System.Int32,SharpGen.Runtime.RawBool)">
            <unmanaged>HRESULT IDXGIInfoQueue::SetBreakOnID([In] GUID Producer, [In] int ID, [In] BOOL bEnable)</unmanaged>
            <unmanaged-short>IDXGIInfoQueue::SetBreakOnID</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.Debug.IDXGIInfoQueue.GetBreakOnCategory(System.Guid,Vortice.DXGI.Debug.InfoQueueMessageCategory)">
            <unmanaged>BOOL IDXGIInfoQueue::GetBreakOnCategory([In] GUID Producer, [In] DXGI_INFO_QUEUE_MESSAGE_CATEGORY Category)</unmanaged>
            <unmanaged-short>IDXGIInfoQueue::GetBreakOnCategory</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.Debug.IDXGIInfoQueue.GetBreakOnSeverity(System.Guid,Vortice.DXGI.Debug.InfoQueueMessageSeverity)">
            <unmanaged>BOOL IDXGIInfoQueue::GetBreakOnSeverity([In] GUID Producer, [In] DXGI_INFO_QUEUE_MESSAGE_SEVERITY Severity)</unmanaged>
            <unmanaged-short>IDXGIInfoQueue::GetBreakOnSeverity</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.Debug.IDXGIInfoQueue.GetBreakOnID(System.Guid,System.Int32)">
            <unmanaged>BOOL IDXGIInfoQueue::GetBreakOnID([In] GUID Producer, [In] int ID)</unmanaged>
            <unmanaged-short>IDXGIInfoQueue::GetBreakOnID</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.Debug.IDXGIInfoQueue.SetMuteDebugOutput(System.Guid,SharpGen.Runtime.RawBool)">
            <unmanaged>void IDXGIInfoQueue::SetMuteDebugOutput([In] GUID Producer, [In] BOOL bMute)</unmanaged>
            <unmanaged-short>IDXGIInfoQueue::SetMuteDebugOutput</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.Debug.IDXGIInfoQueue.GetMuteDebugOutput(System.Guid)">
            <unmanaged>BOOL IDXGIInfoQueue::GetMuteDebugOutput([In] GUID Producer)</unmanaged>
            <unmanaged-short>IDXGIInfoQueue::GetMuteDebugOutput</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.Debug.InfoQueueFilter">
            <unmanaged>DXGI_INFO_QUEUE_FILTER</unmanaged>
            <unmanaged-short>DXGI_INFO_QUEUE_FILTER</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.Debug.InfoQueueFilter.AllowList">
            <unmanaged>AllowList</unmanaged>
            <unmanaged-short>AllowList</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.Debug.InfoQueueFilter.DenyList">
            <unmanaged>DenyList</unmanaged>
            <unmanaged-short>DenyList</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.Debug.InfoQueueFilterDescription">
            <unmanaged>DXGI_INFO_QUEUE_FILTER_DESC</unmanaged>
            <unmanaged-short>DXGI_INFO_QUEUE_FILTER_DESC</unmanaged-short>
        </member>
        <member name="P:Vortice.DXGI.Debug.InfoQueueFilterDescription.Categories">
            <summary>
            Gets or sets the categories.
            </summary>
        </member>
        <member name="P:Vortice.DXGI.Debug.InfoQueueFilterDescription.Severities">
            <summary>
            Gets or sets the severities.
            </summary>
        </member>
        <member name="P:Vortice.DXGI.Debug.InfoQueueFilterDescription.Ids">
            <summary>
            Gets or sets the ids.
            </summary>
        </member>
        <member name="T:Vortice.DXGI.Debug.InfoQueueMessageCategory">
            <unmanaged>DXGI_INFO_QUEUE_MESSAGE_CATEGORY</unmanaged>
            <unmanaged-short>DXGI_INFO_QUEUE_MESSAGE_CATEGORY</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.Debug.InfoQueueMessageCategory.Unknown">
            <unmanaged>DXGI_INFO_QUEUE_MESSAGE_CATEGORY_UNKNOWN</unmanaged>
            <unmanaged-short>DXGI_INFO_QUEUE_MESSAGE_CATEGORY_UNKNOWN</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.Debug.InfoQueueMessageCategory.Miscellaneous">
            <unmanaged>DXGI_INFO_QUEUE_MESSAGE_CATEGORY_MISCELLANEOUS</unmanaged>
            <unmanaged-short>DXGI_INFO_QUEUE_MESSAGE_CATEGORY_MISCELLANEOUS</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.Debug.InfoQueueMessageCategory.Initialization">
            <unmanaged>DXGI_INFO_QUEUE_MESSAGE_CATEGORY_INITIALIZATION</unmanaged>
            <unmanaged-short>DXGI_INFO_QUEUE_MESSAGE_CATEGORY_INITIALIZATION</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.Debug.InfoQueueMessageCategory.Cleanup">
            <unmanaged>DXGI_INFO_QUEUE_MESSAGE_CATEGORY_CLEANUP</unmanaged>
            <unmanaged-short>DXGI_INFO_QUEUE_MESSAGE_CATEGORY_CLEANUP</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.Debug.InfoQueueMessageCategory.Compilation">
            <unmanaged>DXGI_INFO_QUEUE_MESSAGE_CATEGORY_COMPILATION</unmanaged>
            <unmanaged-short>DXGI_INFO_QUEUE_MESSAGE_CATEGORY_COMPILATION</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.Debug.InfoQueueMessageCategory.StateCreation">
            <unmanaged>DXGI_INFO_QUEUE_MESSAGE_CATEGORY_STATE_CREATION</unmanaged>
            <unmanaged-short>DXGI_INFO_QUEUE_MESSAGE_CATEGORY_STATE_CREATION</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.Debug.InfoQueueMessageCategory.StateSetting">
            <unmanaged>DXGI_INFO_QUEUE_MESSAGE_CATEGORY_STATE_SETTING</unmanaged>
            <unmanaged-short>DXGI_INFO_QUEUE_MESSAGE_CATEGORY_STATE_SETTING</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.Debug.InfoQueueMessageCategory.StateGetting">
            <unmanaged>DXGI_INFO_QUEUE_MESSAGE_CATEGORY_STATE_GETTING</unmanaged>
            <unmanaged-short>DXGI_INFO_QUEUE_MESSAGE_CATEGORY_STATE_GETTING</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.Debug.InfoQueueMessageCategory.ResourceManipulation">
            <unmanaged>DXGI_INFO_QUEUE_MESSAGE_CATEGORY_RESOURCE_MANIPULATION</unmanaged>
            <unmanaged-short>DXGI_INFO_QUEUE_MESSAGE_CATEGORY_RESOURCE_MANIPULATION</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.Debug.InfoQueueMessageCategory.Execution">
            <unmanaged>DXGI_INFO_QUEUE_MESSAGE_CATEGORY_EXECUTION</unmanaged>
            <unmanaged-short>DXGI_INFO_QUEUE_MESSAGE_CATEGORY_EXECUTION</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.Debug.InfoQueueMessageCategory.Shader">
            <unmanaged>DXGI_INFO_QUEUE_MESSAGE_CATEGORY_SHADER</unmanaged>
            <unmanaged-short>DXGI_INFO_QUEUE_MESSAGE_CATEGORY_SHADER</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.Debug.InfoQueueMessageSeverity">
            <unmanaged>DXGI_INFO_QUEUE_MESSAGE_SEVERITY</unmanaged>
            <unmanaged-short>DXGI_INFO_QUEUE_MESSAGE_SEVERITY</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.Debug.InfoQueueMessageSeverity.Corruption">
            <unmanaged>DXGI_INFO_QUEUE_MESSAGE_SEVERITY_CORRUPTION</unmanaged>
            <unmanaged-short>DXGI_INFO_QUEUE_MESSAGE_SEVERITY_CORRUPTION</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.Debug.InfoQueueMessageSeverity.Error">
            <unmanaged>DXGI_INFO_QUEUE_MESSAGE_SEVERITY_ERROR</unmanaged>
            <unmanaged-short>DXGI_INFO_QUEUE_MESSAGE_SEVERITY_ERROR</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.Debug.InfoQueueMessageSeverity.Warning">
            <unmanaged>DXGI_INFO_QUEUE_MESSAGE_SEVERITY_WARNING</unmanaged>
            <unmanaged-short>DXGI_INFO_QUEUE_MESSAGE_SEVERITY_WARNING</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.Debug.InfoQueueMessageSeverity.Info">
            <unmanaged>DXGI_INFO_QUEUE_MESSAGE_SEVERITY_INFO</unmanaged>
            <unmanaged-short>DXGI_INFO_QUEUE_MESSAGE_SEVERITY_INFO</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.Debug.InfoQueueMessageSeverity.Message">
            <unmanaged>DXGI_INFO_QUEUE_MESSAGE_SEVERITY_MESSAGE</unmanaged>
            <unmanaged-short>DXGI_INFO_QUEUE_MESSAGE_SEVERITY_MESSAGE</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.Debug.ReportLiveObjectFlags">
            <unmanaged>DXGI_DEBUG_RLO_FLAGS</unmanaged>
            <unmanaged-short>DXGI_DEBUG_RLO_FLAGS</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.Debug.ReportLiveObjectFlags.Summary">
            <unmanaged>DXGI_DEBUG_RLO_SUMMARY</unmanaged>
            <unmanaged-short>DXGI_DEBUG_RLO_SUMMARY</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.Debug.ReportLiveObjectFlags.Detail">
            <unmanaged>DXGI_DEBUG_RLO_DETAIL</unmanaged>
            <unmanaged-short>DXGI_DEBUG_RLO_DETAIL</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.Debug.ReportLiveObjectFlags.IgnoreInternal">
            <unmanaged>DXGI_DEBUG_RLO_IGNORE_INTERNAL</unmanaged>
            <unmanaged-short>DXGI_DEBUG_RLO_IGNORE_INTERNAL</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.Debug.ReportLiveObjectFlags.All">
            <unmanaged>DXGI_DEBUG_RLO_ALL</unmanaged>
            <unmanaged-short>DXGI_DEBUG_RLO_ALL</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.Debug.ReportLiveObjectFlags.None">
            <summary>
            Synthetic NONE value
            </summary>
            <unmanaged>None</unmanaged>
            <unmanaged-short>None</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.Debug.IDXGIDebug">
            <unmanaged>IDXGIDebug</unmanaged>
            <unmanaged-short>IDXGIDebug</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.Debug.IDXGIDebug.ReportLiveObjects(System.Guid,Vortice.DXGI.Debug.ReportLiveObjectFlags)">
            <unmanaged>HRESULT IDXGIDebug::ReportLiveObjects([In] GUID apiid, [In] DXGI_DEBUG_RLO_FLAGS flags)</unmanaged>
            <unmanaged-short>IDXGIDebug::ReportLiveObjects</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.Debug.IDXGIDebug1">
            <unmanaged>IDXGIDebug1</unmanaged>
            <unmanaged-short>IDXGIDebug1</unmanaged-short>
        </member>
        <member name="P:Vortice.DXGI.Debug.IDXGIDebug1.IsLeakTrackingEnabledForThread">
            <unmanaged>BOOL IDXGIDebug1::IsLeakTrackingEnabledForThread()</unmanaged>
            <unmanaged-short>IDXGIDebug1::IsLeakTrackingEnabledForThread</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.Debug.IDXGIDebug1.EnableLeakTrackingForThread">
            <unmanaged>void IDXGIDebug1::EnableLeakTrackingForThread()</unmanaged>
            <unmanaged-short>IDXGIDebug1::EnableLeakTrackingForThread</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.Debug.IDXGIDebug1.DisableLeakTrackingForThread">
            <unmanaged>void IDXGIDebug1::DisableLeakTrackingForThread()</unmanaged>
            <unmanaged-short>IDXGIDebug1::DisableLeakTrackingForThread</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.Debug.IDXGIDebug1.IsLeakTrackingEnabledForThread_">
            <unmanaged>BOOL IDXGIDebug1::IsLeakTrackingEnabledForThread()</unmanaged>
            <unmanaged-short>IDXGIDebug1::IsLeakTrackingEnabledForThread</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.Debug.InfoQueueMessage">
            <unmanaged>DXGI_INFO_QUEUE_MESSAGE</unmanaged>
            <unmanaged-short>DXGI_INFO_QUEUE_MESSAGE</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.Debug.InfoQueueMessage.Producer">
            <unmanaged>Producer</unmanaged>
            <unmanaged-short>Producer</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.Debug.InfoQueueMessage.Category">
            <unmanaged>Category</unmanaged>
            <unmanaged-short>Category</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.Debug.InfoQueueMessage.Severity">
            <unmanaged>Severity</unmanaged>
            <unmanaged-short>Severity</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.Debug.InfoQueueMessage.Id">
            <unmanaged>ID</unmanaged>
            <unmanaged-short>ID</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.Debug.InfoQueueMessage.Description">
            <unmanaged>pDescription</unmanaged>
            <unmanaged-short>pDescription</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.Debug.InfoQueueMessage.DescriptionByteLength">
            <unmanaged>DescriptionByteLength</unmanaged>
            <unmanaged-short>DescriptionByteLength</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.DXGI">
            <summary>
            Functions
            </summary>
        </member>
        <member name="F:Vortice.DXGI.DXGI.DebugAll">
            <summary>
            DXGI_DEBUG_ALL.
            </summary>
        </member>
        <member name="F:Vortice.DXGI.DXGI.DebugDx">
            <summary>
            DXGI_DEBUG_DX
            </summary>
        </member>
        <member name="F:Vortice.DXGI.DXGI.DebugDxgi">
            <summary>
            DXGI_DEBUG_DXGI
            </summary>
        </member>
        <member name="F:Vortice.DXGI.DXGI.DebugApp">
            <summary>
            DXGI_DEBUG_APP
            </summary>
        </member>
        <member name="M:Vortice.DXGI.DXGI.CreateDXGIFactory1``1(``0@)">
            <summary>
            Try to create new instance of <see cref="T:Vortice.DXGI.IDXGIFactory1"/>.
            </summary>
            <param name="factory">The <see cref="T:Vortice.DXGI.IDXGIFactory1"/> being created.</param>
            <returns>Return the <see cref="T:SharpGen.Runtime.Result"/>.</returns>
        </member>
        <member name="M:Vortice.DXGI.DXGI.CreateDXGIFactory1``1">
            <summary>
            Try to create new instance of <see cref="T:Vortice.DXGI.IDXGIFactory1"/>.
            </summary>
            <returns>Return an instance of <see cref="T:Vortice.DXGI.IDXGIFactory1"/> or null if failed.</returns>
        </member>
        <member name="M:Vortice.DXGI.DXGI.CreateDXGIFactory2``1(System.Boolean,``0@)">
            <summary>
            Try to create new instance of <see cref="T:Vortice.DXGI.IDXGIFactory2"/>.
            </summary>
            <param name="debug">Whether to enable debug callback.</param>
            <param name="factory">The <see cref="T:Vortice.DXGI.IDXGIFactory2"/> being created.</param>
            <returns>Return the <see cref="T:SharpGen.Runtime.Result"/>.</returns>
        </member>
        <member name="M:Vortice.DXGI.DXGI.CreateDXGIFactory2``1(System.Boolean)">
            <summary>
            Try to create new instance of <see cref="T:Vortice.DXGI.IDXGIFactory2"/>.
            </summary>
            <param name="debug">Whether to enable debug callback.</param>
            <returns>Return an instance of <see cref="T:Vortice.DXGI.IDXGIFactory2"/> or null if failed.</returns>
        </member>
        <member name="M:Vortice.DXGI.DXGI.DXGIGetDebugInterface1``1(``0@)">
            <summary>
            Gets debug interface for given type.
            </summary>
            <typeparam name="T">The <see cref="T:SharpGen.Runtime.ComObject"/> to get.</typeparam>
            <param name="debugInterface">Instance of T.</param>
            <returns>The result code.</returns>
        </member>
        <member name="M:Vortice.DXGI.DXGI.DXGIGetDebugInterface1``1">
            <summary>
            Gets debug interface for given type.
            </summary>
            <typeparam name="T">The <see cref="T:SharpGen.Runtime.ComObject"/> to get.</typeparam>
            <returns>The <see cref="T:SharpGen.Runtime.ComObject"/> to get.</returns>
        </member>
        <member name="F:Vortice.DXGI.DXGI.CreateFactoryDebug">
            <summary>
            Constant CreateFactoryDebug
            </summary>
            <unmanaged>DXGI_CREATE_FACTORY_DEBUG</unmanaged>
            <unmanaged-short>DXGI_CREATE_FACTORY_DEBUG</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.DXGI.CreateDXGIFactory1(System.Guid,System.IntPtr@)">
            <unmanaged>HRESULT CreateDXGIFactory1([In] const GUID&amp; riid, [Out] void** ppFactory)</unmanaged>
            <unmanaged-short>CreateDXGIFactory1</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.DXGI.CreateDXGIFactory2(System.Int32,System.Guid,System.IntPtr@)">
            <unmanaged>HRESULT CreateDXGIFactory2([In] UINT Flags, [In] const GUID&amp; riid, [Out] void** ppFactory)</unmanaged>
            <unmanaged-short>CreateDXGIFactory2</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.DXGI.DXGIGetDebugInterface1(System.Int32,System.Guid,System.IntPtr@)">
            <unmanaged>HRESULT DXGIGetDebugInterface1([In] UINT Flags, [In] const GUID&amp; riid, [Out] void** pDebug)</unmanaged>
            <unmanaged-short>DXGIGetDebugInterface1</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.DXGI.DXGIDeclareAdapterRemovalSupport">
            <unmanaged>HRESULT DXGIDeclareAdapterRemovalSupport()</unmanaged>
            <unmanaged-short>DXGIDeclareAdapterRemovalSupport</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.IDXGIAdapter">
            <unmanaged>IDXGIAdapter</unmanaged>
            <unmanaged-short>IDXGIAdapter</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIAdapter.GetOutput(System.Int32)">
            <summary>
            Get an instance of <see cref="T:Vortice.DXGI.IDXGIAdapter"/> or null if not found.
            </summary>
            <remarks>
            Make sure to dispose the <see cref="T:Vortice.DXGI.IDXGIAdapter"/> instance.
            </remarks>
            <param name="index">The index to get from.</param>
            <returns>Instance of <see cref="T:Vortice.DXGI.IDXGIAdapter"/> or null if not found.</returns>
        </member>
        <member name="P:Vortice.DXGI.IDXGIAdapter.Description">
            <unmanaged>HRESULT IDXGIAdapter::GetDesc([Out] DXGI_ADAPTER_DESC* pDesc)</unmanaged>
            <unmanaged-short>IDXGIAdapter::GetDesc</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIAdapter.EnumOutputs(System.Int32,Vortice.DXGI.IDXGIOutput@)">
            <unmanaged>HRESULT IDXGIAdapter::EnumOutputs([In] UINT Output, [Out] IDXGIOutput** ppOutput)</unmanaged>
            <unmanaged-short>IDXGIAdapter::EnumOutputs</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIAdapter.GetDescription">
            <unmanaged>HRESULT IDXGIAdapter::GetDesc([Out] DXGI_ADAPTER_DESC* pDesc)</unmanaged>
            <unmanaged-short>IDXGIAdapter::GetDesc</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIAdapter.CheckInterfaceSupport(System.Guid,System.Int64@)">
            <unmanaged>HRESULT IDXGIAdapter::CheckInterfaceSupport([In] const GUID&amp; InterfaceName, [Out] LARGE_INTEGER* pUMDVersion)</unmanaged>
            <unmanaged-short>IDXGIAdapter::CheckInterfaceSupport</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.IDXGIDecodeSwapChain">
            <unmanaged>IDXGIDecodeSwapChain</unmanaged>
            <unmanaged-short>IDXGIDecodeSwapChain</unmanaged-short>
        </member>
        <member name="P:Vortice.DXGI.IDXGIDecodeSwapChain.SourceRect">
            <unmanaged>HRESULT IDXGIDecodeSwapChain::GetSourceRect([Out] RECT* pRect) / HRESULT IDXGIDecodeSwapChain::SetSourceRect([In] const RECT* pRect)</unmanaged>
            <unmanaged-short>IDXGIDecodeSwapChain::GetSourceRect / IDXGIDecodeSwapChain::SetSourceRect</unmanaged-short>
        </member>
        <member name="P:Vortice.DXGI.IDXGIDecodeSwapChain.TargetRect">
            <unmanaged>HRESULT IDXGIDecodeSwapChain::GetTargetRect([Out] RECT* pRect) / HRESULT IDXGIDecodeSwapChain::SetTargetRect([In] const RECT* pRect)</unmanaged>
            <unmanaged-short>IDXGIDecodeSwapChain::GetTargetRect / IDXGIDecodeSwapChain::SetTargetRect</unmanaged-short>
        </member>
        <member name="P:Vortice.DXGI.IDXGIDecodeSwapChain.ColorSpace">
            <unmanaged>DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAGS IDXGIDecodeSwapChain::GetColorSpace() / HRESULT IDXGIDecodeSwapChain::SetColorSpace([In] DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAGS ColorSpace)</unmanaged>
            <unmanaged-short>IDXGIDecodeSwapChain::GetColorSpace / IDXGIDecodeSwapChain::SetColorSpace</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIDecodeSwapChain.PresentBuffer(System.Int32,System.Int32,Vortice.DXGI.PresentFlags)">
            <unmanaged>HRESULT IDXGIDecodeSwapChain::PresentBuffer([In] UINT BufferToPresent, [In] UINT SyncInterval, [In] UINT Flags)</unmanaged>
            <unmanaged-short>IDXGIDecodeSwapChain::PresentBuffer</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIDecodeSwapChain.SetSourceRect(Vortice.RawRect)">
            <unmanaged>HRESULT IDXGIDecodeSwapChain::SetSourceRect([In] const RECT* pRect)</unmanaged>
            <unmanaged-short>IDXGIDecodeSwapChain::SetSourceRect</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIDecodeSwapChain.SetTargetRect(Vortice.RawRect)">
            <unmanaged>HRESULT IDXGIDecodeSwapChain::SetTargetRect([In] const RECT* pRect)</unmanaged>
            <unmanaged-short>IDXGIDecodeSwapChain::SetTargetRect</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIDecodeSwapChain.SetDestSize(System.Int32,System.Int32)">
            <unmanaged>HRESULT IDXGIDecodeSwapChain::SetDestSize([In] UINT Width, [In] UINT Height)</unmanaged>
            <unmanaged-short>IDXGIDecodeSwapChain::SetDestSize</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIDecodeSwapChain.GetSourceRect">
            <unmanaged>HRESULT IDXGIDecodeSwapChain::GetSourceRect([Out] RECT* pRect)</unmanaged>
            <unmanaged-short>IDXGIDecodeSwapChain::GetSourceRect</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIDecodeSwapChain.GetTargetRect">
            <unmanaged>HRESULT IDXGIDecodeSwapChain::GetTargetRect([Out] RECT* pRect)</unmanaged>
            <unmanaged-short>IDXGIDecodeSwapChain::GetTargetRect</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIDecodeSwapChain.GetDestSize(System.Int32@,System.Int32@)">
            <unmanaged>HRESULT IDXGIDecodeSwapChain::GetDestSize([Out] UINT* pWidth, [Out] UINT* pHeight)</unmanaged>
            <unmanaged-short>IDXGIDecodeSwapChain::GetDestSize</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIDecodeSwapChain.SetColorSpace(Vortice.DXGI.MultiplaneOverlayYCbCrFlags)">
            <unmanaged>HRESULT IDXGIDecodeSwapChain::SetColorSpace([In] DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAGS ColorSpace)</unmanaged>
            <unmanaged-short>IDXGIDecodeSwapChain::SetColorSpace</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIDecodeSwapChain.GetColorSpace">
            <unmanaged>DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAGS IDXGIDecodeSwapChain::GetColorSpace()</unmanaged>
            <unmanaged-short>IDXGIDecodeSwapChain::GetColorSpace</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.IDXGIDevice">
            <unmanaged>IDXGIDevice</unmanaged>
            <unmanaged-short>IDXGIDevice</unmanaged-short>
        </member>
        <member name="P:Vortice.DXGI.IDXGIDevice.GPUThreadPriority">
            <unmanaged>HRESULT IDXGIDevice::GetGPUThreadPriority([Out] int* pPriority) / HRESULT IDXGIDevice::SetGPUThreadPriority([In] int Priority)</unmanaged>
            <unmanaged-short>IDXGIDevice::GetGPUThreadPriority / IDXGIDevice::SetGPUThreadPriority</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIDevice.GetAdapter(Vortice.DXGI.IDXGIAdapter@)">
            <unmanaged>HRESULT IDXGIDevice::GetAdapter([Out] IDXGIAdapter** pAdapter)</unmanaged>
            <unmanaged-short>IDXGIDevice::GetAdapter</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIDevice.CreateSurface(System.Nullable{Vortice.DXGI.SurfaceDescription},System.Int32,System.Int32,System.Nullable{Vortice.DXGI.SharedResource})">
            <unmanaged>HRESULT IDXGIDevice::CreateSurface([In, Optional, Value] const DXGI_SURFACE_DESC* pDesc, [In] UINT NumSurfaces, [In] UINT Usage, [In, Optional] const DXGI_SHARED_RESOURCE* pSharedResource, [Out] IDXGISurface** ppSurface)</unmanaged>
            <unmanaged-short>IDXGIDevice::CreateSurface</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIDevice.QueryResourceResidency(SharpGen.Runtime.IUnknown[],Vortice.DXGI.Residency[],System.Int32)">
            <unmanaged>HRESULT IDXGIDevice::QueryResourceResidency([In, Buffer] const IUnknown** ppResources, [Out, Buffer] DXGI_RESIDENCY* pResidencyStatus, [In] UINT NumResources)</unmanaged>
            <unmanaged-short>IDXGIDevice::QueryResourceResidency</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIDevice.SetGPUThreadPriority(System.Int32)">
            <unmanaged>HRESULT IDXGIDevice::SetGPUThreadPriority([In] int Priority)</unmanaged>
            <unmanaged-short>IDXGIDevice::SetGPUThreadPriority</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIDevice.GetGPUThreadPriority">
            <unmanaged>HRESULT IDXGIDevice::GetGPUThreadPriority([Out] int* pPriority)</unmanaged>
            <unmanaged-short>IDXGIDevice::GetGPUThreadPriority</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.IDXGIDeviceSubObject">
            <unmanaged>IDXGIDeviceSubObject</unmanaged>
            <unmanaged-short>IDXGIDeviceSubObject</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIDeviceSubObject.GetDevice(System.Guid,System.IntPtr@)">
            <unmanaged>HRESULT IDXGIDeviceSubObject::GetDevice([In] const GUID&amp; riid, [Out] void** ppDevice)</unmanaged>
            <unmanaged-short>IDXGIDeviceSubObject::GetDevice</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.IDXGIFactory">
            <unmanaged>IDXGIFactory</unmanaged>
            <unmanaged-short>IDXGIFactory</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIFactory.GetAdapter(System.Int32)">
            <summary>
            Get an instance of <see cref="T:Vortice.DXGI.IDXGIAdapter"/> or null if not found.
            </summary>
            <remarks>
            Make sure to dispose the <see cref="T:Vortice.DXGI.IDXGIAdapter"/> instance.
            </remarks>
            <param name="index">The index to get from.</param>
            <returns>Instance of <see cref="T:Vortice.DXGI.IDXGIAdapter"/> or null if not found.</returns>
        </member>
        <member name="M:Vortice.DXGI.IDXGIFactory.EnumAdapters(System.Int32,Vortice.DXGI.IDXGIAdapter@)">
            <unmanaged>HRESULT IDXGIFactory::EnumAdapters([In] UINT Adapter, [Out] IDXGIAdapter** ppAdapter)</unmanaged>
            <unmanaged-short>IDXGIFactory::EnumAdapters</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIFactory.MakeWindowAssociation(System.IntPtr,Vortice.DXGI.WindowAssociationFlags)">
            <unmanaged>HRESULT IDXGIFactory::MakeWindowAssociation([In] HWND WindowHandle, [In] UINT Flags)</unmanaged>
            <unmanaged-short>IDXGIFactory::MakeWindowAssociation</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIFactory.GetWindowAssociation">
            <unmanaged>HRESULT IDXGIFactory::GetWindowAssociation([Out] HWND* pWindowHandle)</unmanaged>
            <unmanaged-short>IDXGIFactory::GetWindowAssociation</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIFactory.CreateSwapChain(SharpGen.Runtime.IUnknown,Vortice.DXGI.SwapChainDescription)">
            <unmanaged>HRESULT IDXGIFactory::CreateSwapChain([In] IUnknown* pDevice, [In, Value] DXGI_SWAP_CHAIN_DESC* pDesc, [Out] IDXGISwapChain** ppSwapChain)</unmanaged>
            <unmanaged-short>IDXGIFactory::CreateSwapChain</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIFactory.CreateSoftwareAdapter(System.IntPtr)">
            <unmanaged>HRESULT IDXGIFactory::CreateSoftwareAdapter([In] HINSTANCE Module, [Out] IDXGIAdapter** ppAdapter)</unmanaged>
            <unmanaged-short>IDXGIFactory::CreateSoftwareAdapter</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.IDXGIFactory1">
            <unmanaged>IDXGIFactory1</unmanaged>
            <unmanaged-short>IDXGIFactory1</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIFactory1.GetAdapter1(System.Int32)">
            <summary>
            Get an instance of <see cref="T:Vortice.DXGI.IDXGIAdapter1"/> or null if not found.
            </summary>
            <remarks>
            Make sure to dispose the <see cref="T:Vortice.DXGI.IDXGIAdapter1"/> instance.
            </remarks>
            <param name="index">The index to get from.</param>
            <returns>Instance of <see cref="T:Vortice.DXGI.IDXGIAdapter1"/> or null if not found.</returns>
        </member>
        <member name="P:Vortice.DXGI.IDXGIFactory1.IsCurrent">
            <unmanaged>BOOL IDXGIFactory1::IsCurrent()</unmanaged>
            <unmanaged-short>IDXGIFactory1::IsCurrent</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIFactory1.EnumAdapters1(System.Int32,Vortice.DXGI.IDXGIAdapter1@)">
            <unmanaged>HRESULT IDXGIFactory1::EnumAdapters1([In] UINT Adapter, [Out] IDXGIAdapter1** ppAdapter)</unmanaged>
            <unmanaged-short>IDXGIFactory1::EnumAdapters1</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIFactory1.IsCurrent_">
            <unmanaged>BOOL IDXGIFactory1::IsCurrent()</unmanaged>
            <unmanaged-short>IDXGIFactory1::IsCurrent</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.IDXGIFactory2">
            <unmanaged>IDXGIFactory2</unmanaged>
            <unmanaged-short>IDXGIFactory2</unmanaged-short>
        </member>
        <member name="P:Vortice.DXGI.IDXGIFactory2.IsWindowedStereoEnabled">
            <unmanaged>BOOL IDXGIFactory2::IsWindowedStereoEnabled()</unmanaged>
            <unmanaged-short>IDXGIFactory2::IsWindowedStereoEnabled</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIFactory2.IsWindowedStereoEnabled_">
            <unmanaged>BOOL IDXGIFactory2::IsWindowedStereoEnabled()</unmanaged>
            <unmanaged-short>IDXGIFactory2::IsWindowedStereoEnabled</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIFactory2.CreateSwapChainForHwnd(SharpGen.Runtime.IUnknown,System.IntPtr,Vortice.DXGI.SwapChainDescription1,System.Nullable{Vortice.DXGI.SwapChainFullscreenDescription},Vortice.DXGI.IDXGIOutput)">
            <unmanaged>HRESULT IDXGIFactory2::CreateSwapChainForHwnd([In] IUnknown* pDevice, [In] HWND hWnd, [In, Value] const DXGI_SWAP_CHAIN_DESC1* pDesc, [In, Optional] const DXGI_SWAP_CHAIN_FULLSCREEN_DESC* pFullscreenDesc, [In, Optional] IDXGIOutput* pRestrictToOutput, [Out] IDXGISwapChain1** ppSwapChain)</unmanaged>
            <unmanaged-short>IDXGIFactory2::CreateSwapChainForHwnd</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIFactory2.CreateSwapChainForCoreWindow(SharpGen.Runtime.IUnknown,SharpGen.Runtime.IUnknown,Vortice.DXGI.SwapChainDescription1,Vortice.DXGI.IDXGIOutput)">
            <unmanaged>HRESULT IDXGIFactory2::CreateSwapChainForCoreWindow([In] IUnknown* pDevice, [In] IUnknown* pWindow, [In, Value] const DXGI_SWAP_CHAIN_DESC1* pDesc, [In, Optional] IDXGIOutput* pRestrictToOutput, [Out] IDXGISwapChain1** ppSwapChain)</unmanaged>
            <unmanaged-short>IDXGIFactory2::CreateSwapChainForCoreWindow</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIFactory2.GetSharedResourceAdapterLuid(System.IntPtr)">
            <unmanaged>HRESULT IDXGIFactory2::GetSharedResourceAdapterLuid([In] HANDLE hResource, [Out] LUID* pLuid)</unmanaged>
            <unmanaged-short>IDXGIFactory2::GetSharedResourceAdapterLuid</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIFactory2.RegisterStereoStatusWindow(System.IntPtr,System.Int32)">
            <unmanaged>HRESULT IDXGIFactory2::RegisterStereoStatusWindow([In] HWND WindowHandle, [In] UINT wMsg, [Out] DWORD* pdwCookie)</unmanaged>
            <unmanaged-short>IDXGIFactory2::RegisterStereoStatusWindow</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIFactory2.RegisterStereoStatusEvent(System.IntPtr)">
            <unmanaged>HRESULT IDXGIFactory2::RegisterStereoStatusEvent([In] HANDLE hEvent, [Out] DWORD* pdwCookie)</unmanaged>
            <unmanaged-short>IDXGIFactory2::RegisterStereoStatusEvent</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIFactory2.UnregisterStereoStatus(System.Int32)">
            <unmanaged>void IDXGIFactory2::UnregisterStereoStatus([In] DWORD dwCookie)</unmanaged>
            <unmanaged-short>IDXGIFactory2::UnregisterStereoStatus</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIFactory2.RegisterOcclusionStatusWindow(System.IntPtr,System.Int32)">
            <unmanaged>HRESULT IDXGIFactory2::RegisterOcclusionStatusWindow([In] HWND WindowHandle, [In] UINT wMsg, [Out] DWORD* pdwCookie)</unmanaged>
            <unmanaged-short>IDXGIFactory2::RegisterOcclusionStatusWindow</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIFactory2.RegisterOcclusionStatusEvent(System.IntPtr)">
            <unmanaged>HRESULT IDXGIFactory2::RegisterOcclusionStatusEvent([In] HANDLE hEvent, [Out] DWORD* pdwCookie)</unmanaged>
            <unmanaged-short>IDXGIFactory2::RegisterOcclusionStatusEvent</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIFactory2.UnregisterOcclusionStatus(System.Int32)">
            <unmanaged>void IDXGIFactory2::UnregisterOcclusionStatus([In] DWORD dwCookie)</unmanaged>
            <unmanaged-short>IDXGIFactory2::UnregisterOcclusionStatus</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIFactory2.CreateSwapChainForComposition(SharpGen.Runtime.IUnknown,Vortice.DXGI.SwapChainDescription1,Vortice.DXGI.IDXGIOutput)">
            <unmanaged>HRESULT IDXGIFactory2::CreateSwapChainForComposition([In] IUnknown* pDevice, [In, Value] const DXGI_SWAP_CHAIN_DESC1* pDesc, [In, Optional] IDXGIOutput* pRestrictToOutput, [Out] IDXGISwapChain1** ppSwapChain)</unmanaged>
            <unmanaged-short>IDXGIFactory2::CreateSwapChainForComposition</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.IDXGIFactory4">
            <unmanaged>IDXGIFactory4</unmanaged>
            <unmanaged-short>IDXGIFactory4</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIFactory4.EnumWarpAdapter``1(``0@)">
            <summary>
            Gets the default warp adapter.
            </summary>
            <typeparam name="T">An instance of <see cref="T:Vortice.DXGI.IDXGIAdapter"/></typeparam>
            <param name="adapter">The adapter instance of <see cref="T:Vortice.DXGI.IDXGIAdapter"/>, make sure to dispose the instance.</param>
            <returns>The warp adapter.</returns>
        </member>
        <member name="M:Vortice.DXGI.IDXGIFactory4.EnumWarpAdapter``1">
            <summary>
            Gets the default warp adapter.
            </summary>
            <typeparam name="T">An instance of <see cref="T:Vortice.DXGI.IDXGIAdapter"/> class.</typeparam>
            <returns>The adapter instance of <see cref="T:Vortice.DXGI.IDXGIAdapter"/>, make sure to dispose the instance.</returns>
        </member>
        <member name="M:Vortice.DXGI.IDXGIFactory4.EnumAdapterByLuid``1(Vortice.Luid,``0@)">
            <summary>
            Gets the adapter for the specified LUID.
            </summary>
            <param name="adapterLuid">A unique value that identifies the adapter.</param>
            <param name="adapter">The adapter instance of <see cref="T:Vortice.DXGI.IDXGIAdapter"/>, make sure to dispose the instance.</param>
            <returns>The <see cref="T:SharpGen.Runtime.Result"/>.</returns>
        </member>
        <member name="M:Vortice.DXGI.IDXGIFactory4.EnumAdapterByLuid``1(Vortice.Luid)">
            <summary>
             Gets the adapter for the specified LUID.
            </summary>
            <typeparam name="T">An instance of <see cref="T:Vortice.DXGI.IDXGIAdapter"/> class.</typeparam>
            <param name="adapterLuid">A unique value that identifies the adapter.</param>
            <returns>The adapter instance of <see cref="T:Vortice.DXGI.IDXGIAdapter"/>, make sure to dispose the instance.</returns>
        </member>
        <member name="M:Vortice.DXGI.IDXGIFactory4.EnumAdapterByLuid(Vortice.Luid,System.Guid,System.IntPtr@)">
            <unmanaged>HRESULT IDXGIFactory4::EnumAdapterByLuid([In] LUID AdapterLuid, [In] const GUID&amp; riid, [Out] void** ppvAdapter)</unmanaged>
            <unmanaged-short>IDXGIFactory4::EnumAdapterByLuid</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIFactory4.EnumWarpAdapter(System.Guid,System.IntPtr@)">
            <unmanaged>HRESULT IDXGIFactory4::EnumWarpAdapter([In] const GUID&amp; riid, [Out] void** ppvAdapter)</unmanaged>
            <unmanaged-short>IDXGIFactory4::EnumWarpAdapter</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.IDXGIFactory5">
            <unmanaged>IDXGIFactory5</unmanaged>
            <unmanaged-short>IDXGIFactory5</unmanaged-short>
        </member>
        <member name="P:Vortice.DXGI.IDXGIFactory5.PresentAllowTearing">
            <summary>
            Gets if tearing is allowed during present.
            </summary>
        </member>
        <member name="M:Vortice.DXGI.IDXGIFactory5.CheckFeatureSupport(Vortice.DXGI.Feature,System.Void*,System.Int32)">
            <unmanaged>HRESULT IDXGIFactory5::CheckFeatureSupport([In] DXGI_FEATURE Feature, [Out, Buffer] void* pFeatureSupportData, [In] UINT FeatureSupportDataSize)</unmanaged>
            <unmanaged-short>IDXGIFactory5::CheckFeatureSupport</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.IDXGIFactory6">
            <unmanaged>IDXGIFactory6</unmanaged>
            <unmanaged-short>IDXGIFactory6</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIFactory6.EnumAdapterByGpuPreference(System.Int32,Vortice.DXGI.GpuPreference,System.Guid,System.IntPtr@)">
            <unmanaged>HRESULT IDXGIFactory6::EnumAdapterByGpuPreference([In] UINT Adapter, [In] DXGI_GPU_PREFERENCE GpuPreference, [In] const GUID&amp; riid, [Out] void** ppvAdapter)</unmanaged>
            <unmanaged-short>IDXGIFactory6::EnumAdapterByGpuPreference</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.IDXGIFactory7">
            <unmanaged>IDXGIFactory7</unmanaged>
            <unmanaged-short>IDXGIFactory7</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIFactory7.RegisterAdaptersChangedEvent(System.IntPtr)">
            <unmanaged>HRESULT IDXGIFactory7::RegisterAdaptersChangedEvent([In] HANDLE hEvent, [Out] DWORD* pdwCookie)</unmanaged>
            <unmanaged-short>IDXGIFactory7::RegisterAdaptersChangedEvent</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIFactory7.UnregisterAdaptersChangedEvent(System.Int32)">
            <unmanaged>HRESULT IDXGIFactory7::UnregisterAdaptersChangedEvent([In] DWORD dwCookie)</unmanaged>
            <unmanaged-short>IDXGIFactory7::UnregisterAdaptersChangedEvent</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.IDXGIFactoryMedia">
            <unmanaged>IDXGIFactoryMedia</unmanaged>
            <unmanaged-short>IDXGIFactoryMedia</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIFactoryMedia.CreateSwapChainForCompositionSurfaceHandle(SharpGen.Runtime.IUnknown,System.IntPtr,Vortice.DXGI.SwapChainDescription1@,Vortice.DXGI.IDXGIOutput)">
            <unmanaged>HRESULT IDXGIFactoryMedia::CreateSwapChainForCompositionSurfaceHandle([In] IUnknown* pDevice, [In, Optional] HANDLE hSurface, [In] const DXGI_SWAP_CHAIN_DESC1* pDesc, [In, Optional] IDXGIOutput* pRestrictToOutput, [Out] IDXGISwapChain1** ppSwapChain)</unmanaged>
            <unmanaged-short>IDXGIFactoryMedia::CreateSwapChainForCompositionSurfaceHandle</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIFactoryMedia.CreateDecodeSwapChainForCompositionSurfaceHandle(SharpGen.Runtime.IUnknown,System.IntPtr,Vortice.DXGI.DecodeSwapChainDescription,Vortice.DXGI.IDXGIResource,Vortice.DXGI.IDXGIOutput)">
            <unmanaged>HRESULT IDXGIFactoryMedia::CreateDecodeSwapChainForCompositionSurfaceHandle([In] IUnknown* pDevice, [In, Optional] HANDLE hSurface, [In] DXGI_DECODE_SWAP_CHAIN_DESC* pDesc, [In] IDXGIResource* pYuvDecodeBuffers, [In, Optional] IDXGIOutput* pRestrictToOutput, [Out] IDXGIDecodeSwapChain** ppSwapChain)</unmanaged>
            <unmanaged-short>IDXGIFactoryMedia::CreateDecodeSwapChainForCompositionSurfaceHandle</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.IDXGIObject">
            <unmanaged>IDXGIObject</unmanaged>
            <unmanaged-short>IDXGIObject</unmanaged-short>
        </member>
        <member name="P:Vortice.DXGI.IDXGIObject.DebugName">
            <summary>
            Gets or sets the debug-name for this object.
            </summary>
        </member>
        <member name="M:Vortice.DXGI.IDXGIObject.SetPrivateData(System.Guid,System.Int32,System.IntPtr)">
            <unmanaged>HRESULT IDXGIObject::SetPrivateData([In] const GUID&amp; Name, [In] UINT DataSize, [In, Buffer] const void* pData)</unmanaged>
            <unmanaged-short>IDXGIObject::SetPrivateData</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIObject.SetPrivateDataInterface(System.Guid,SharpGen.Runtime.IUnknown)">
            <unmanaged>HRESULT IDXGIObject::SetPrivateDataInterface([In] const GUID&amp; Name, [In, Optional] const IUnknown* pUnknown)</unmanaged>
            <unmanaged-short>IDXGIObject::SetPrivateDataInterface</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIObject.GetPrivateData(System.Guid,System.Int32@,System.IntPtr)">
            <unmanaged>HRESULT IDXGIObject::GetPrivateData([In] const GUID&amp; Name, [InOut] UINT* pDataSize, [Out, Buffer] void* pData)</unmanaged>
            <unmanaged-short>IDXGIObject::GetPrivateData</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIObject.GetParent(System.Guid,System.IntPtr@)">
            <unmanaged>HRESULT IDXGIObject::GetParent([In] const GUID&amp; riid, [Out] void** ppParent)</unmanaged>
            <unmanaged-short>IDXGIObject::GetParent</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.IDXGIOutput">
            <unmanaged>IDXGIOutput</unmanaged>
            <unmanaged-short>IDXGIOutput</unmanaged-short>
        </member>
        <member name="P:Vortice.DXGI.IDXGIOutput.Description">
            <unmanaged>HRESULT IDXGIOutput::GetDesc([Out] DXGI_OUTPUT_DESC* pDesc)</unmanaged>
            <unmanaged-short>IDXGIOutput::GetDesc</unmanaged-short>
        </member>
        <member name="P:Vortice.DXGI.IDXGIOutput.GammaControlCapabilities">
            <unmanaged>HRESULT IDXGIOutput::GetGammaControlCapabilities([Out] DXGI_GAMMA_CONTROL_CAPABILITIES* pGammaCaps)</unmanaged>
            <unmanaged-short>IDXGIOutput::GetGammaControlCapabilities</unmanaged-short>
        </member>
        <member name="P:Vortice.DXGI.IDXGIOutput.GammaControl">
            <unmanaged>HRESULT IDXGIOutput::GetGammaControl([Out] DXGI_GAMMA_CONTROL* pArray) / HRESULT IDXGIOutput::SetGammaControl([In] const DXGI_GAMMA_CONTROL* pArray)</unmanaged>
            <unmanaged-short>IDXGIOutput::GetGammaControl / IDXGIOutput::SetGammaControl</unmanaged-short>
        </member>
        <member name="P:Vortice.DXGI.IDXGIOutput.FrameStatistics">
            <unmanaged>HRESULT IDXGIOutput::GetFrameStatistics([Out] DXGI_FRAME_STATISTICS* pStats)</unmanaged>
            <unmanaged-short>IDXGIOutput::GetFrameStatistics</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIOutput.GetDescription">
            <unmanaged>HRESULT IDXGIOutput::GetDesc([Out] DXGI_OUTPUT_DESC* pDesc)</unmanaged>
            <unmanaged-short>IDXGIOutput::GetDesc</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIOutput.GetDisplayModeList(Vortice.DXGI.Format,System.Int32,System.Int32@,Vortice.DXGI.ModeDescription[])">
            <unmanaged>HRESULT IDXGIOutput::GetDisplayModeList([In] DXGI_FORMAT EnumFormat, [In] UINT Flags, [InOut] UINT* pNumModes, [Out, Buffer, Optional] DXGI_MODE_DESC* pDesc)</unmanaged>
            <unmanaged-short>IDXGIOutput::GetDisplayModeList</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIOutput.FindClosestMatchingMode(Vortice.DXGI.ModeDescription@,SharpGen.Runtime.IUnknown)">
            <unmanaged>HRESULT IDXGIOutput::FindClosestMatchingMode([In] const DXGI_MODE_DESC* pModeToMatch, [Out] DXGI_MODE_DESC* pClosestMatch, [In, Optional] IUnknown* pConcernedDevice)</unmanaged>
            <unmanaged-short>IDXGIOutput::FindClosestMatchingMode</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIOutput.WaitForVBlank">
            <unmanaged>HRESULT IDXGIOutput::WaitForVBlank()</unmanaged>
            <unmanaged-short>IDXGIOutput::WaitForVBlank</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIOutput.TakeOwnership(SharpGen.Runtime.IUnknown,SharpGen.Runtime.RawBool)">
            <unmanaged>HRESULT IDXGIOutput::TakeOwnership([In] IUnknown* pDevice, [In] BOOL Exclusive)</unmanaged>
            <unmanaged-short>IDXGIOutput::TakeOwnership</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIOutput.ReleaseOwnership">
            <unmanaged>void IDXGIOutput::ReleaseOwnership()</unmanaged>
            <unmanaged-short>IDXGIOutput::ReleaseOwnership</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIOutput.GetGammaControlCapabilities">
            <unmanaged>HRESULT IDXGIOutput::GetGammaControlCapabilities([Out] DXGI_GAMMA_CONTROL_CAPABILITIES* pGammaCaps)</unmanaged>
            <unmanaged-short>IDXGIOutput::GetGammaControlCapabilities</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIOutput.SetGammaControl(Vortice.DXGI.GammaControl)">
            <unmanaged>HRESULT IDXGIOutput::SetGammaControl([In] const DXGI_GAMMA_CONTROL* pArray)</unmanaged>
            <unmanaged-short>IDXGIOutput::SetGammaControl</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIOutput.GetGammaControl">
            <unmanaged>HRESULT IDXGIOutput::GetGammaControl([Out] DXGI_GAMMA_CONTROL* pArray)</unmanaged>
            <unmanaged-short>IDXGIOutput::GetGammaControl</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIOutput.SetDisplaySurface(Vortice.DXGI.IDXGISurface)">
            <unmanaged>HRESULT IDXGIOutput::SetDisplaySurface([In] IDXGISurface* pScanoutSurface)</unmanaged>
            <unmanaged-short>IDXGIOutput::SetDisplaySurface</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIOutput.GetDisplaySurfaceData(Vortice.DXGI.IDXGISurface)">
            <unmanaged>HRESULT IDXGIOutput::GetDisplaySurfaceData([In] IDXGISurface* pDestination)</unmanaged>
            <unmanaged-short>IDXGIOutput::GetDisplaySurfaceData</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIOutput.GetFrameStatistics">
            <unmanaged>HRESULT IDXGIOutput::GetFrameStatistics([Out] DXGI_FRAME_STATISTICS* pStats)</unmanaged>
            <unmanaged-short>IDXGIOutput::GetFrameStatistics</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.IDXGIOutput1">
            <unmanaged>IDXGIOutput1</unmanaged>
            <unmanaged-short>IDXGIOutput1</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIOutput1.GetDisplayModeList1(Vortice.DXGI.Format,System.Int32,System.Int32@,Vortice.DXGI.ModeDescription1[])">
            <unmanaged>HRESULT IDXGIOutput1::GetDisplayModeList1([In] DXGI_FORMAT EnumFormat, [In] UINT Flags, [InOut] UINT* pNumModes, [Out, Buffer, Optional] DXGI_MODE_DESC1* pDesc)</unmanaged>
            <unmanaged-short>IDXGIOutput1::GetDisplayModeList1</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIOutput1.FindClosestMatchingMode1(Vortice.DXGI.ModeDescription1@,SharpGen.Runtime.IUnknown)">
            <unmanaged>HRESULT IDXGIOutput1::FindClosestMatchingMode1([In] const DXGI_MODE_DESC1* pModeToMatch, [Out] DXGI_MODE_DESC1* pClosestMatch, [In, Optional] IUnknown* pConcernedDevice)</unmanaged>
            <unmanaged-short>IDXGIOutput1::FindClosestMatchingMode1</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIOutput1.GetDisplaySurfaceData1(Vortice.DXGI.IDXGIResource)">
            <unmanaged>HRESULT IDXGIOutput1::GetDisplaySurfaceData1([In] IDXGIResource* pDestination)</unmanaged>
            <unmanaged-short>IDXGIOutput1::GetDisplaySurfaceData1</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIOutput1.DuplicateOutput(SharpGen.Runtime.IUnknown)">
            <unmanaged>HRESULT IDXGIOutput1::DuplicateOutput([In] IUnknown* pDevice, [Out] IDXGIOutputDuplication** ppOutputDuplication)</unmanaged>
            <unmanaged-short>IDXGIOutput1::DuplicateOutput</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.IDXGIOutput3">
            <unmanaged>IDXGIOutput3</unmanaged>
            <unmanaged-short>IDXGIOutput3</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIOutput3.CheckOverlaySupport(Vortice.DXGI.Format,SharpGen.Runtime.IUnknown)">
            <summary>
            Checks for overlay support.
            </summary>
            <param name="format">A <see cref="T:Vortice.DXGI.Format"/> value for the color format.</param>
            <param name="concernedDevice">Instance of Direct3D device interface.</param>
            <returns>Overlay support flags.</returns>
        </member>
        <member name="M:Vortice.DXGI.IDXGIOutput3.CheckOverlaySupport_(Vortice.DXGI.Format,SharpGen.Runtime.IUnknown)">
            <unmanaged>HRESULT IDXGIOutput3::CheckOverlaySupport([In] DXGI_FORMAT EnumFormat, [In] IUnknown* pConcernedDevice, [Out] UINT* pFlags)</unmanaged>
            <unmanaged-short>IDXGIOutput3::CheckOverlaySupport</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.IDXGIOutput4">
            <unmanaged>IDXGIOutput4</unmanaged>
            <unmanaged-short>IDXGIOutput4</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIOutput4.CheckOverlayColorSpaceSupport(Vortice.DXGI.Format,Vortice.DXGI.ColorSpaceType,SharpGen.Runtime.IUnknown)">
            <summary>
            Checks for overlay color space support.
            </summary>
            <param name="format">A <see cref="T:Vortice.DXGI.Format"/> value for the color format.</param>
            <param name="colorSpace">A <see cref="T:Vortice.DXGI.ColorSpaceType"/> value that specifies color space type to check overlay support for.</param>
            <param name="concernedDevice">Instance of Direct3D device interface.</param>
            <returns>Overlay color space support flags.</returns>
        </member>
        <member name="M:Vortice.DXGI.IDXGIOutput4.CheckOverlayColorSpaceSupport_(Vortice.DXGI.Format,Vortice.DXGI.ColorSpaceType,SharpGen.Runtime.IUnknown)">
            <unmanaged>HRESULT IDXGIOutput4::CheckOverlayColorSpaceSupport([In] DXGI_FORMAT Format, [In] DXGI_COLOR_SPACE_TYPE ColorSpace, [In] IUnknown* pConcernedDevice, [Out] UINT* pFlags)</unmanaged>
            <unmanaged-short>IDXGIOutput4::CheckOverlayColorSpaceSupport</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.IDXGIOutput5">
            <unmanaged>IDXGIOutput5</unmanaged>
            <unmanaged-short>IDXGIOutput5</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIOutput5.DuplicateOutput1_(SharpGen.Runtime.IUnknown,System.Int32,System.Int32,Vortice.DXGI.Format[])">
            <unmanaged>HRESULT IDXGIOutput5::DuplicateOutput1([In] IUnknown* pDevice, [In] UINT Flags, [In] UINT SupportedFormatsCount, [In, Buffer] const DXGI_FORMAT* pSupportedFormats, [Out] IDXGIOutputDuplication** ppOutputDuplication)</unmanaged>
            <unmanaged-short>IDXGIOutput5::DuplicateOutput1</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.IDXGISurface2">
            <unmanaged>IDXGISurface2</unmanaged>
            <unmanaged-short>IDXGISurface2</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGISurface2.GetResource(System.Guid,System.IntPtr@,System.Int32@)">
            <unmanaged>HRESULT IDXGISurface2::GetResource([In] const GUID&amp; riid, [Out] void** ppParentResource, [Out] UINT* pSubresourceIndex)</unmanaged>
            <unmanaged-short>IDXGISurface2::GetResource</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.IDXGISwapChain">
            <unmanaged>IDXGISwapChain</unmanaged>
            <unmanaged-short>IDXGISwapChain</unmanaged-short>
        </member>
        <member name="P:Vortice.DXGI.IDXGISwapChain.Description">
            <unmanaged>HRESULT IDXGISwapChain::GetDesc([Out] DXGI_SWAP_CHAIN_DESC* pDesc)</unmanaged>
            <unmanaged-short>IDXGISwapChain::GetDesc</unmanaged-short>
        </member>
        <member name="P:Vortice.DXGI.IDXGISwapChain.LastPresentCount">
            <unmanaged>HRESULT IDXGISwapChain::GetLastPresentCount([Out] UINT* pLastPresentCount)</unmanaged>
            <unmanaged-short>IDXGISwapChain::GetLastPresentCount</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGISwapChain.Present(System.Int32,Vortice.DXGI.PresentFlags)">
            <unmanaged>HRESULT IDXGISwapChain::Present([In] UINT SyncInterval, [In] UINT Flags)</unmanaged>
            <unmanaged-short>IDXGISwapChain::Present</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGISwapChain.GetBuffer(System.Int32,System.Guid,System.IntPtr@)">
            <unmanaged>HRESULT IDXGISwapChain::GetBuffer([In] UINT Buffer, [In] const GUID&amp; riid, [Out] void** ppSurface)</unmanaged>
            <unmanaged-short>IDXGISwapChain::GetBuffer</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGISwapChain.SetFullscreenState(SharpGen.Runtime.RawBool,Vortice.DXGI.IDXGIOutput)">
            <unmanaged>HRESULT IDXGISwapChain::SetFullscreenState([In] BOOL Fullscreen, [In, Optional] IDXGIOutput* pTarget)</unmanaged>
            <unmanaged-short>IDXGISwapChain::SetFullscreenState</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGISwapChain.GetFullscreenState(SharpGen.Runtime.RawBool@,Vortice.DXGI.IDXGIOutput@)">
            <unmanaged>HRESULT IDXGISwapChain::GetFullscreenState([Out, Optional] BOOL* pFullscreen, [Out, Optional] IDXGIOutput** ppTarget)</unmanaged>
            <unmanaged-short>IDXGISwapChain::GetFullscreenState</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGISwapChain.GetDescription">
            <unmanaged>HRESULT IDXGISwapChain::GetDesc([Out] DXGI_SWAP_CHAIN_DESC* pDesc)</unmanaged>
            <unmanaged-short>IDXGISwapChain::GetDesc</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGISwapChain.ResizeBuffers(System.Int32,System.Int32,System.Int32,Vortice.DXGI.Format,Vortice.DXGI.SwapChainFlags)">
            <unmanaged>HRESULT IDXGISwapChain::ResizeBuffers([In] UINT BufferCount, [In] UINT Width, [In] UINT Height, [In] DXGI_FORMAT NewFormat, [In] UINT SwapChainFlags)</unmanaged>
            <unmanaged-short>IDXGISwapChain::ResizeBuffers</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGISwapChain.ResizeTarget(Vortice.DXGI.ModeDescription@)">
            <unmanaged>HRESULT IDXGISwapChain::ResizeTarget([In] const DXGI_MODE_DESC* pNewTargetParameters)</unmanaged>
            <unmanaged-short>IDXGISwapChain::ResizeTarget</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGISwapChain.GetContainingOutput">
            <unmanaged>HRESULT IDXGISwapChain::GetContainingOutput([Out] IDXGIOutput** ppOutput)</unmanaged>
            <unmanaged-short>IDXGISwapChain::GetContainingOutput</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGISwapChain.GetFrameStatistics(Vortice.DXGI.FrameStatistics@)">
            <unmanaged>HRESULT IDXGISwapChain::GetFrameStatistics([Out] DXGI_FRAME_STATISTICS* pStats)</unmanaged>
            <unmanaged-short>IDXGISwapChain::GetFrameStatistics</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGISwapChain.GetLastPresentCount">
            <unmanaged>HRESULT IDXGISwapChain::GetLastPresentCount([Out] UINT* pLastPresentCount)</unmanaged>
            <unmanaged-short>IDXGISwapChain::GetLastPresentCount</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.IDXGISwapChain1">
            <unmanaged>IDXGISwapChain1</unmanaged>
            <unmanaged-short>IDXGISwapChain1</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGISwapChain1.GetHwnd">
            <summary>
            Retrieves the underlying HWND for this swap-chain object.
            </summary>
            <returns>Native HWND handle</returns>
        </member>
        <member name="M:Vortice.DXGI.IDXGISwapChain1.GetCoreWindow``1">
            <summary>
            Retrieves the underlying CoreWindow object for this swap-chain object.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Vortice.DXGI.IDXGISwapChain1.GetCoreWindow``1(``0@)">
            <summary>
            Retrieves the underlying CoreWindow object for this swap-chain object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="coreWindow"></param>
            <returns></returns>
        </member>
        <member name="P:Vortice.DXGI.IDXGISwapChain1.Description1">
            <unmanaged>HRESULT IDXGISwapChain1::GetDesc1([Out] DXGI_SWAP_CHAIN_DESC1* pDesc)</unmanaged>
            <unmanaged-short>IDXGISwapChain1::GetDesc1</unmanaged-short>
        </member>
        <member name="P:Vortice.DXGI.IDXGISwapChain1.FullscreenDescription">
            <unmanaged>HRESULT IDXGISwapChain1::GetFullscreenDesc([Out] DXGI_SWAP_CHAIN_FULLSCREEN_DESC* pDesc)</unmanaged>
            <unmanaged-short>IDXGISwapChain1::GetFullscreenDesc</unmanaged-short>
        </member>
        <member name="P:Vortice.DXGI.IDXGISwapChain1.IsTemporaryMonoSupported">
            <unmanaged>BOOL IDXGISwapChain1::IsTemporaryMonoSupported()</unmanaged>
            <unmanaged-short>IDXGISwapChain1::IsTemporaryMonoSupported</unmanaged-short>
        </member>
        <member name="P:Vortice.DXGI.IDXGISwapChain1.RestrictToOutput">
            <unmanaged>HRESULT IDXGISwapChain1::GetRestrictToOutput([Out] IDXGIOutput** ppRestrictToOutput)</unmanaged>
            <unmanaged-short>IDXGISwapChain1::GetRestrictToOutput</unmanaged-short>
        </member>
        <member name="P:Vortice.DXGI.IDXGISwapChain1.BackgroundColor">
            <unmanaged>HRESULT IDXGISwapChain1::GetBackgroundColor([Out] DXGI_RGBA* pColor) / HRESULT IDXGISwapChain1::SetBackgroundColor([In] const DXGI_RGBA* pColor)</unmanaged>
            <unmanaged-short>IDXGISwapChain1::GetBackgroundColor / IDXGISwapChain1::SetBackgroundColor</unmanaged-short>
        </member>
        <member name="P:Vortice.DXGI.IDXGISwapChain1.Rotation">
            <unmanaged>HRESULT IDXGISwapChain1::GetRotation([Out] DXGI_MODE_ROTATION* pRotation) / HRESULT IDXGISwapChain1::SetRotation([In] DXGI_MODE_ROTATION Rotation)</unmanaged>
            <unmanaged-short>IDXGISwapChain1::GetRotation / IDXGISwapChain1::SetRotation</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGISwapChain1.GetDescription1">
            <unmanaged>HRESULT IDXGISwapChain1::GetDesc1([Out] DXGI_SWAP_CHAIN_DESC1* pDesc)</unmanaged>
            <unmanaged-short>IDXGISwapChain1::GetDesc1</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGISwapChain1.GetFullscreenDescription">
            <unmanaged>HRESULT IDXGISwapChain1::GetFullscreenDesc([Out] DXGI_SWAP_CHAIN_FULLSCREEN_DESC* pDesc)</unmanaged>
            <unmanaged-short>IDXGISwapChain1::GetFullscreenDesc</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGISwapChain1.GetHwnd(System.IntPtr@)">
            <unmanaged>HRESULT IDXGISwapChain1::GetHwnd([Out] HWND* pHwnd)</unmanaged>
            <unmanaged-short>IDXGISwapChain1::GetHwnd</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGISwapChain1.GetCoreWindow(System.Guid,System.IntPtr@)">
            <unmanaged>HRESULT IDXGISwapChain1::GetCoreWindow([In] const GUID&amp; refiid, [Out] void** ppUnk)</unmanaged>
            <unmanaged-short>IDXGISwapChain1::GetCoreWindow</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGISwapChain1.Present1(System.Int32,Vortice.DXGI.PresentFlags,System.IntPtr)">
            <unmanaged>HRESULT IDXGISwapChain1::Present1([In] UINT SyncInterval, [In] UINT PresentFlags, [In] const DXGI_PRESENT_PARAMETERS* pPresentParameters)</unmanaged>
            <unmanaged-short>IDXGISwapChain1::Present1</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGISwapChain1.IsTemporaryMonoSupported_">
            <unmanaged>BOOL IDXGISwapChain1::IsTemporaryMonoSupported()</unmanaged>
            <unmanaged-short>IDXGISwapChain1::IsTemporaryMonoSupported</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGISwapChain1.GetRestrictToOutput">
            <unmanaged>HRESULT IDXGISwapChain1::GetRestrictToOutput([Out] IDXGIOutput** ppRestrictToOutput)</unmanaged>
            <unmanaged-short>IDXGISwapChain1::GetRestrictToOutput</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGISwapChain1.SetBackgroundColor(Vortice.Mathematics.Color4)">
            <unmanaged>HRESULT IDXGISwapChain1::SetBackgroundColor([In] const DXGI_RGBA* pColor)</unmanaged>
            <unmanaged-short>IDXGISwapChain1::SetBackgroundColor</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGISwapChain1.GetBackgroundColor">
            <unmanaged>HRESULT IDXGISwapChain1::GetBackgroundColor([Out] DXGI_RGBA* pColor)</unmanaged>
            <unmanaged-short>IDXGISwapChain1::GetBackgroundColor</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGISwapChain1.SetRotation(Vortice.DXGI.ModeRotation)">
            <unmanaged>HRESULT IDXGISwapChain1::SetRotation([In] DXGI_MODE_ROTATION Rotation)</unmanaged>
            <unmanaged-short>IDXGISwapChain1::SetRotation</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGISwapChain1.GetRotation">
            <unmanaged>HRESULT IDXGISwapChain1::GetRotation([Out] DXGI_MODE_ROTATION* pRotation)</unmanaged>
            <unmanaged-short>IDXGISwapChain1::GetRotation</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.IDXGISwapChain2">
            <unmanaged>IDXGISwapChain2</unmanaged>
            <unmanaged-short>IDXGISwapChain2</unmanaged-short>
        </member>
        <member name="P:Vortice.DXGI.IDXGISwapChain2.MaximumFrameLatency">
            <unmanaged>HRESULT IDXGISwapChain2::GetMaximumFrameLatency([Out] UINT* pMaxLatency) / HRESULT IDXGISwapChain2::SetMaximumFrameLatency([In] UINT MaxLatency)</unmanaged>
            <unmanaged-short>IDXGISwapChain2::GetMaximumFrameLatency / IDXGISwapChain2::SetMaximumFrameLatency</unmanaged-short>
        </member>
        <member name="P:Vortice.DXGI.IDXGISwapChain2.FrameLatencyWaitableObject">
            <unmanaged>HANDLE IDXGISwapChain2::GetFrameLatencyWaitableObject()</unmanaged>
            <unmanaged-short>IDXGISwapChain2::GetFrameLatencyWaitableObject</unmanaged-short>
        </member>
        <member name="P:Vortice.DXGI.IDXGISwapChain2.MatrixTransform">
            <unmanaged>HRESULT IDXGISwapChain2::GetMatrixTransform([Out] DXGI_MATRIX_3X2_F* pMatrix) / HRESULT IDXGISwapChain2::SetMatrixTransform([In] const DXGI_MATRIX_3X2_F* pMatrix)</unmanaged>
            <unmanaged-short>IDXGISwapChain2::GetMatrixTransform / IDXGISwapChain2::SetMatrixTransform</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGISwapChain2.SetSourceSize(System.Int32,System.Int32)">
            <unmanaged>HRESULT IDXGISwapChain2::SetSourceSize([In] UINT Width, [In] UINT Height)</unmanaged>
            <unmanaged-short>IDXGISwapChain2::SetSourceSize</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGISwapChain2.GetSourceSize(System.Int32@,System.Int32@)">
            <unmanaged>HRESULT IDXGISwapChain2::GetSourceSize([Out] UINT* pWidth, [Out] UINT* pHeight)</unmanaged>
            <unmanaged-short>IDXGISwapChain2::GetSourceSize</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGISwapChain2.SetMaximumFrameLatency(System.Int32)">
            <unmanaged>HRESULT IDXGISwapChain2::SetMaximumFrameLatency([In] UINT MaxLatency)</unmanaged>
            <unmanaged-short>IDXGISwapChain2::SetMaximumFrameLatency</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGISwapChain2.GetMaximumFrameLatency">
            <unmanaged>HRESULT IDXGISwapChain2::GetMaximumFrameLatency([Out] UINT* pMaxLatency)</unmanaged>
            <unmanaged-short>IDXGISwapChain2::GetMaximumFrameLatency</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGISwapChain2.GetFrameLatencyWaitableObject">
            <unmanaged>HANDLE IDXGISwapChain2::GetFrameLatencyWaitableObject()</unmanaged>
            <unmanaged-short>IDXGISwapChain2::GetFrameLatencyWaitableObject</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGISwapChain2.SetMatrixTransform(System.Numerics.Matrix3x2@)">
            <unmanaged>HRESULT IDXGISwapChain2::SetMatrixTransform([In] const DXGI_MATRIX_3X2_F* pMatrix)</unmanaged>
            <unmanaged-short>IDXGISwapChain2::SetMatrixTransform</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGISwapChain2.GetMatrixTransform">
            <unmanaged>HRESULT IDXGISwapChain2::GetMatrixTransform([Out] DXGI_MATRIX_3X2_F* pMatrix)</unmanaged>
            <unmanaged-short>IDXGISwapChain2::GetMatrixTransform</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.IDXGISwapChain3">
            <unmanaged>IDXGISwapChain3</unmanaged>
            <unmanaged-short>IDXGISwapChain3</unmanaged-short>
        </member>
        <member name="P:Vortice.DXGI.IDXGISwapChain3.CurrentBackBufferIndex">
            <unmanaged>UINT IDXGISwapChain3::GetCurrentBackBufferIndex()</unmanaged>
            <unmanaged-short>IDXGISwapChain3::GetCurrentBackBufferIndex</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGISwapChain3.GetCurrentBackBufferIndex">
            <unmanaged>UINT IDXGISwapChain3::GetCurrentBackBufferIndex()</unmanaged>
            <unmanaged-short>IDXGISwapChain3::GetCurrentBackBufferIndex</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGISwapChain3.CheckColorSpaceSupport(Vortice.DXGI.ColorSpaceType)">
            <unmanaged>HRESULT IDXGISwapChain3::CheckColorSpaceSupport([In] DXGI_COLOR_SPACE_TYPE ColorSpace, [Out] UINT* pColorSpaceSupport)</unmanaged>
            <unmanaged-short>IDXGISwapChain3::CheckColorSpaceSupport</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGISwapChain3.SetColorSpace1(Vortice.DXGI.ColorSpaceType)">
            <unmanaged>HRESULT IDXGISwapChain3::SetColorSpace1([In] DXGI_COLOR_SPACE_TYPE ColorSpace)</unmanaged>
            <unmanaged-short>IDXGISwapChain3::SetColorSpace1</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGISwapChain3.ResizeBuffers1(System.Int32,System.Int32,System.Int32,Vortice.DXGI.Format,Vortice.DXGI.SwapChainFlags,System.Int32[],SharpGen.Runtime.IUnknown[])">
            <unmanaged>HRESULT IDXGISwapChain3::ResizeBuffers1([In] UINT BufferCount, [In] UINT Width, [In] UINT Height, [In] DXGI_FORMAT Format, [In] UINT SwapChainFlags, [In, Buffer] const UINT* pCreationNodeMask, [In, Buffer] const IUnknown** ppPresentQueue)</unmanaged>
            <unmanaged-short>IDXGISwapChain3::ResizeBuffers1</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.IDXGISwapChain4">
            <unmanaged>IDXGISwapChain4</unmanaged>
            <unmanaged-short>IDXGISwapChain4</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGISwapChain4.SetHDRMetaData(Vortice.DXGI.HdrMetadataType,System.Int32,System.IntPtr)">
            <unmanaged>HRESULT IDXGISwapChain4::SetHDRMetaData([In] DXGI_HDR_METADATA_TYPE Type, [In] UINT Size, [In, Buffer, Optional] void* pMetaData)</unmanaged>
            <unmanaged-short>IDXGISwapChain4::SetHDRMetaData</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.IVirtualSurfaceImageSourceNative">
            <unmanaged>IVirtualSurfaceImageSourceNative</unmanaged>
            <unmanaged-short>IVirtualSurfaceImageSourceNative</unmanaged-short>
        </member>
        <member name="P:Vortice.DXGI.IVirtualSurfaceImageSourceNative.UpdateRectangles">
            <summary>
            Gets the set of regions that must be updated on the shared surface.
            </summary>
        </member>
        <member name="P:Vortice.DXGI.IVirtualSurfaceImageSourceNative.VisibleBounds">
            <unmanaged>HRESULT IVirtualSurfaceImageSourceNative::GetVisibleBounds([Out] RECT* bounds)</unmanaged>
            <unmanaged-short>IVirtualSurfaceImageSourceNative::GetVisibleBounds</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IVirtualSurfaceImageSourceNative.Invalidate(Vortice.RawRect)">
            <unmanaged>HRESULT IVirtualSurfaceImageSourceNative::Invalidate([In] RECT updateRect)</unmanaged>
            <unmanaged-short>IVirtualSurfaceImageSourceNative::Invalidate</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IVirtualSurfaceImageSourceNative.GetUpdateRectCount(System.Int32@)">
            <unmanaged>HRESULT IVirtualSurfaceImageSourceNative::GetUpdateRectCount([Out] DWORD* count)</unmanaged>
            <unmanaged-short>IVirtualSurfaceImageSourceNative::GetUpdateRectCount</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IVirtualSurfaceImageSourceNative.GetUpdateRects(Vortice.RawRect[],System.Int32)">
            <unmanaged>HRESULT IVirtualSurfaceImageSourceNative::GetUpdateRects([Out, Buffer] RECT* updates, [In] DWORD count)</unmanaged>
            <unmanaged-short>IVirtualSurfaceImageSourceNative::GetUpdateRects</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IVirtualSurfaceImageSourceNative.GetVisibleBounds">
            <unmanaged>HRESULT IVirtualSurfaceImageSourceNative::GetVisibleBounds([Out] RECT* bounds)</unmanaged>
            <unmanaged-short>IVirtualSurfaceImageSourceNative::GetVisibleBounds</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IVirtualSurfaceImageSourceNative.RegisterForUpdatesNeeded(Vortice.DXGI.IVirtualSurfaceUpdatesCallbackNative)">
            <unmanaged>HRESULT IVirtualSurfaceImageSourceNative::RegisterForUpdatesNeeded([In, Optional] IVirtualSurfaceUpdatesCallbackNative* callback)</unmanaged>
            <unmanaged-short>IVirtualSurfaceImageSourceNative::RegisterForUpdatesNeeded</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IVirtualSurfaceImageSourceNative.Resize(System.Int32,System.Int32)">
            <unmanaged>HRESULT IVirtualSurfaceImageSourceNative::Resize([In] int newWidth, [In] int newHeight)</unmanaged>
            <unmanaged-short>IVirtualSurfaceImageSourceNative::Resize</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.PresentParameters">
            <unmanaged>DXGI_PRESENT_PARAMETERS</unmanaged>
            <unmanaged-short>DXGI_PRESENT_PARAMETERS</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.PresentParameters.DirtyRectangles">
            <summary>	
            <para>A list of updated rectangles that you update in the back buffer for the presented frame. An application must update every single pixel in each rectangle that it reports to the runtime; the application cannot assume that the pixels are saved from the previous frame. For more information about updating dirty rectangles, see Remarks. You can set this member to <c>null</c> if DirtyRectsCount is 0. An application must not update any pixel outside of the dirty rectangles.</para>	
            </summary>	
        </member>
        <member name="F:Vortice.DXGI.PresentParameters.ScrollRectangle">
            <summary>	
            <para> A reference to the scrolled rectangle. The scrolled rectangle is the rectangle of the previous frame from which the runtime bit-block transfers (bitblts) content. The runtime also uses the scrolled rectangle to optimize presentation in terminal server and indirect display scenarios.</para>	
             <para>The scrolled rectangle also describes the destination rectangle, that is, the region on the current frame that is filled with scrolled content. You can set this member to <c>null</c> to indicate that no content is scrolled from the previous frame.</para>	
            </summary>	
        </member>
        <member name="F:Vortice.DXGI.PresentParameters.ScrollOffset">
            <summary>	
            <para>A reference to the offset of the scrolled area that goes from the source rectangle (of previous frame) to the destination rectangle (of current frame). You can set this member to <c>null</c> to indicate no offset.</para>	
            </summary>	
            <unmanaged>POINT* pScrollOffset</unmanaged>	
        </member>
        <member name="T:Vortice.DXGI.SwapChainDescription1">
            <unmanaged>DXGI_SWAP_CHAIN_DESC1</unmanaged>
            <unmanaged-short>DXGI_SWAP_CHAIN_DESC1</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.SwapChainDescription1.#ctor(System.Int32,System.Int32,Vortice.DXGI.Format,System.Boolean,Vortice.DXGI.Usage,System.Int32,Vortice.DXGI.Scaling,Vortice.DXGI.SwapEffect,Vortice.DXGI.AlphaMode,Vortice.DXGI.SwapChainFlags)">
            <summary>
            Create new instance of <see cref="T:Vortice.DXGI.SwapChainDescription1"/> struct.
            </summary>
            <param name="width"></param>
            <param name="height"></param>
            <param name="format">A <see cref="T:Vortice.DXGI.Format"/> that describes the display format.</param>
            <param name="stereo">
            Specifies whether the full-screen display mode or the swap-chain back buffer is stereo. TRUE if stereo; otherwise, FALSE.
            If you specify stereo, you must also specify a flip-model swap chain (that is, a swap chain that has the <see cref="F:Vortice.DXGI.SwapEffect.FlipSequential"/> value set in the SwapEffect member).
            </param>
            <param name="bufferUsage">
            A <see cref="T:Vortice.DXGI.Usage"/> value that describes the surface usage and CPU access options for the back buffer. The back buffer can be used for shader input or render-target output.
            </param>
            <param name="bufferCount">
            A value that describes the number of buffers in the swap chain. When you create a full-screen swap chain, you typically include the front buffer in this value.
            </param>
            <param name="scaling">
            A <see cref="T:Vortice.DXGI.Scaling"/> value that identifies resize behavior if the size of the back buffer is not equal to the target output.
            </param>
            <param name="swapEffect">
            A <see cref="T:Vortice.DXGI.SwapEffect"/> value that describes the presentation model that is used by the swap chain and options for handling the contents of the presentation buffer after presenting a surface.
            You must specify the <see cref="F:Vortice.DXGI.SwapEffect.FlipSequential"/> value when you call the <see cref="M:Vortice.DXGI.IDXGIFactory2.CreateSwapChainForComposition(SharpGen.Runtime.IUnknown,Vortice.DXGI.SwapChainDescription1,Vortice.DXGI.IDXGIOutput)"/> method because this method supports only flip presentation model.
            </param>
            <param name="alphaMode">
            A <see cref="T:Vortice.DXGI.AlphaMode"/> value that identifies the transparency behavior of the swap-chain back buffer.
            </param>
            <param name="flags">
            A combination of <see cref="T:Vortice.DXGI.SwapChainFlags"/> values that are combined by using a bitwise OR operation. The resulting value specifies options for swap-chain behavior.
            </param>
        </member>
        <member name="F:Vortice.DXGI.SwapChainDescription1.Width">
            <unmanaged>Width</unmanaged>
            <unmanaged-short>Width</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.SwapChainDescription1.Height">
            <unmanaged>Height</unmanaged>
            <unmanaged-short>Height</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.SwapChainDescription1.Format">
            <unmanaged>Format</unmanaged>
            <unmanaged-short>Format</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.SwapChainDescription1.Stereo">
            <unmanaged>Stereo</unmanaged>
            <unmanaged-short>Stereo</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.SwapChainDescription1.SampleDescription">
            <unmanaged>SampleDesc</unmanaged>
            <unmanaged-short>SampleDesc</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.SwapChainDescription1.BufferUsage">
            <unmanaged>BufferUsage</unmanaged>
            <unmanaged-short>BufferUsage</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.SwapChainDescription1.BufferCount">
            <unmanaged>BufferCount</unmanaged>
            <unmanaged-short>BufferCount</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.SwapChainDescription1.Scaling">
            <unmanaged>Scaling</unmanaged>
            <unmanaged-short>Scaling</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.SwapChainDescription1.SwapEffect">
            <unmanaged>SwapEffect</unmanaged>
            <unmanaged-short>SwapEffect</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.SwapChainDescription1.AlphaMode">
            <unmanaged>AlphaMode</unmanaged>
            <unmanaged-short>AlphaMode</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.SwapChainDescription1.Flags">
            <unmanaged>Flags</unmanaged>
            <unmanaged-short>Flags</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.AdapterFlags">
            <unmanaged>DXGI_ADAPTER_FLAG</unmanaged>
            <unmanaged-short>DXGI_ADAPTER_FLAG</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.AdapterFlags.None">
            <unmanaged>DXGI_ADAPTER_FLAG_NONE</unmanaged>
            <unmanaged-short>DXGI_ADAPTER_FLAG_NONE</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.AdapterFlags.Remote">
            <unmanaged>DXGI_ADAPTER_FLAG_REMOTE</unmanaged>
            <unmanaged-short>DXGI_ADAPTER_FLAG_REMOTE</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.AdapterFlags.Software">
            <unmanaged>DXGI_ADAPTER_FLAG_SOFTWARE</unmanaged>
            <unmanaged-short>DXGI_ADAPTER_FLAG_SOFTWARE</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.AdapterFlags3">
            <unmanaged>DXGI_ADAPTER_FLAG3</unmanaged>
            <unmanaged-short>DXGI_ADAPTER_FLAG3</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.AdapterFlags3.None">
            <unmanaged>DXGI_ADAPTER_FLAG3_NONE</unmanaged>
            <unmanaged-short>DXGI_ADAPTER_FLAG3_NONE</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.AdapterFlags3.Remote">
            <unmanaged>DXGI_ADAPTER_FLAG3_REMOTE</unmanaged>
            <unmanaged-short>DXGI_ADAPTER_FLAG3_REMOTE</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.AdapterFlags3.Software">
            <unmanaged>DXGI_ADAPTER_FLAG3_SOFTWARE</unmanaged>
            <unmanaged-short>DXGI_ADAPTER_FLAG3_SOFTWARE</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.AdapterFlags3.AcgCompatible">
            <unmanaged>DXGI_ADAPTER_FLAG3_ACG_COMPATIBLE</unmanaged>
            <unmanaged-short>DXGI_ADAPTER_FLAG3_ACG_COMPATIBLE</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.AdapterFlags3.SupportMonitoredFences">
            <unmanaged>DXGI_ADAPTER_FLAG3_SUPPORT_MONITORED_FENCES</unmanaged>
            <unmanaged-short>DXGI_ADAPTER_FLAG3_SUPPORT_MONITORED_FENCES</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.AdapterFlags3.SupportNonMonitoredFences">
            <unmanaged>DXGI_ADAPTER_FLAG3_SUPPORT_NON_MONITORED_FENCES</unmanaged>
            <unmanaged-short>DXGI_ADAPTER_FLAG3_SUPPORT_NON_MONITORED_FENCES</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.AdapterFlags3.KeyedMutexConformance">
            <unmanaged>DXGI_ADAPTER_FLAG3_KEYED_MUTEX_CONFORMANCE</unmanaged>
            <unmanaged-short>DXGI_ADAPTER_FLAG3_KEYED_MUTEX_CONFORMANCE</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.AlphaMode">
            <unmanaged>DXGI_ALPHA_MODE</unmanaged>
            <unmanaged-short>DXGI_ALPHA_MODE</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.AlphaMode.Unspecified">
            <unmanaged>DXGI_ALPHA_MODE_UNSPECIFIED</unmanaged>
            <unmanaged-short>DXGI_ALPHA_MODE_UNSPECIFIED</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.AlphaMode.Premultiplied">
            <unmanaged>DXGI_ALPHA_MODE_PREMULTIPLIED</unmanaged>
            <unmanaged-short>DXGI_ALPHA_MODE_PREMULTIPLIED</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.AlphaMode.Straight">
            <unmanaged>DXGI_ALPHA_MODE_STRAIGHT</unmanaged>
            <unmanaged-short>DXGI_ALPHA_MODE_STRAIGHT</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.AlphaMode.Ignore">
            <unmanaged>DXGI_ALPHA_MODE_IGNORE</unmanaged>
            <unmanaged-short>DXGI_ALPHA_MODE_IGNORE</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.ComputePreemptionGranularity">
            <unmanaged>DXGI_COMPUTE_PREEMPTION_GRANULARITY</unmanaged>
            <unmanaged-short>DXGI_COMPUTE_PREEMPTION_GRANULARITY</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.ComputePreemptionGranularity.DmaBufferBoundary">
            <unmanaged>DXGI_COMPUTE_PREEMPTION_DMA_BUFFER_BOUNDARY</unmanaged>
            <unmanaged-short>DXGI_COMPUTE_PREEMPTION_DMA_BUFFER_BOUNDARY</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.ComputePreemptionGranularity.DispatchBoundary">
            <unmanaged>DXGI_COMPUTE_PREEMPTION_DISPATCH_BOUNDARY</unmanaged>
            <unmanaged-short>DXGI_COMPUTE_PREEMPTION_DISPATCH_BOUNDARY</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.ComputePreemptionGranularity.ThreadGroupBoundary">
            <unmanaged>DXGI_COMPUTE_PREEMPTION_THREAD_GROUP_BOUNDARY</unmanaged>
            <unmanaged-short>DXGI_COMPUTE_PREEMPTION_THREAD_GROUP_BOUNDARY</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.ComputePreemptionGranularity.ThreadBoundary">
            <unmanaged>DXGI_COMPUTE_PREEMPTION_THREAD_BOUNDARY</unmanaged>
            <unmanaged-short>DXGI_COMPUTE_PREEMPTION_THREAD_BOUNDARY</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.ComputePreemptionGranularity.InstructionBoundary">
            <unmanaged>DXGI_COMPUTE_PREEMPTION_INSTRUCTION_BOUNDARY</unmanaged>
            <unmanaged-short>DXGI_COMPUTE_PREEMPTION_INSTRUCTION_BOUNDARY</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.DisplayModeEnumerationFlags">
            <unmanaged>DXGI_ENUM_MODES_FLAGS</unmanaged>
            <unmanaged-short>DXGI_ENUM_MODES_FLAGS</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.DisplayModeEnumerationFlags.Interlaced">
            <unmanaged>DXGI_ENUM_MODES_INTERLACED</unmanaged>
            <unmanaged-short>DXGI_ENUM_MODES_INTERLACED</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.DisplayModeEnumerationFlags.Scaling">
            <unmanaged>DXGI_ENUM_MODES_SCALING</unmanaged>
            <unmanaged-short>DXGI_ENUM_MODES_SCALING</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.DisplayModeEnumerationFlags.Stereo">
            <unmanaged>DXGI_ENUM_MODES_STEREO</unmanaged>
            <unmanaged-short>DXGI_ENUM_MODES_STEREO</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.DisplayModeEnumerationFlags.DisabledStereo">
            <unmanaged>DXGI_ENUM_MODES_DISABLED_STEREO</unmanaged>
            <unmanaged-short>DXGI_ENUM_MODES_DISABLED_STEREO</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.Feature">
            <unmanaged>DXGI_FEATURE</unmanaged>
            <unmanaged-short>DXGI_FEATURE</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.Feature.PresentAllowTearing">
            <unmanaged>DXGI_FEATURE_PRESENT_ALLOW_TEARING</unmanaged>
            <unmanaged-short>DXGI_FEATURE_PRESENT_ALLOW_TEARING</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.FramePresentationMode">
            <unmanaged>DXGI_FRAME_PRESENTATION_MODE</unmanaged>
            <unmanaged-short>DXGI_FRAME_PRESENTATION_MODE</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.FramePresentationMode.Composed">
            <unmanaged>DXGI_FRAME_PRESENTATION_MODE_COMPOSED</unmanaged>
            <unmanaged-short>DXGI_FRAME_PRESENTATION_MODE_COMPOSED</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.FramePresentationMode.Overlay">
            <unmanaged>DXGI_FRAME_PRESENTATION_MODE_OVERLAY</unmanaged>
            <unmanaged-short>DXGI_FRAME_PRESENTATION_MODE_OVERLAY</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.FramePresentationMode.None">
            <unmanaged>DXGI_FRAME_PRESENTATION_MODE_NONE</unmanaged>
            <unmanaged-short>DXGI_FRAME_PRESENTATION_MODE_NONE</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.FramePresentationMode.CompositionFailure">
            <unmanaged>DXGI_FRAME_PRESENTATION_MODE_COMPOSITION_FAILURE</unmanaged>
            <unmanaged-short>DXGI_FRAME_PRESENTATION_MODE_COMPOSITION_FAILURE</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.GpuPreference">
            <unmanaged>DXGI_GPU_PREFERENCE</unmanaged>
            <unmanaged-short>DXGI_GPU_PREFERENCE</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.GpuPreference.Unspecified">
            <unmanaged>DXGI_GPU_PREFERENCE_UNSPECIFIED</unmanaged>
            <unmanaged-short>DXGI_GPU_PREFERENCE_UNSPECIFIED</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.GpuPreference.MinimumPower">
            <unmanaged>DXGI_GPU_PREFERENCE_MINIMUM_POWER</unmanaged>
            <unmanaged-short>DXGI_GPU_PREFERENCE_MINIMUM_POWER</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.GpuPreference.HighPerformance">
            <unmanaged>DXGI_GPU_PREFERENCE_HIGH_PERFORMANCE</unmanaged>
            <unmanaged-short>DXGI_GPU_PREFERENCE_HIGH_PERFORMANCE</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.GraphicsPreemptionGranularity">
            <unmanaged>DXGI_GRAPHICS_PREEMPTION_GRANULARITY</unmanaged>
            <unmanaged-short>DXGI_GRAPHICS_PREEMPTION_GRANULARITY</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.GraphicsPreemptionGranularity.DmaBufferBoundary">
            <unmanaged>DXGI_GRAPHICS_PREEMPTION_DMA_BUFFER_BOUNDARY</unmanaged>
            <unmanaged-short>DXGI_GRAPHICS_PREEMPTION_DMA_BUFFER_BOUNDARY</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.GraphicsPreemptionGranularity.PrimitiveBoundary">
            <unmanaged>DXGI_GRAPHICS_PREEMPTION_PRIMITIVE_BOUNDARY</unmanaged>
            <unmanaged-short>DXGI_GRAPHICS_PREEMPTION_PRIMITIVE_BOUNDARY</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.GraphicsPreemptionGranularity.TriangleBoundary">
            <unmanaged>DXGI_GRAPHICS_PREEMPTION_TRIANGLE_BOUNDARY</unmanaged>
            <unmanaged-short>DXGI_GRAPHICS_PREEMPTION_TRIANGLE_BOUNDARY</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.GraphicsPreemptionGranularity.PixelBoundary">
            <unmanaged>DXGI_GRAPHICS_PREEMPTION_PIXEL_BOUNDARY</unmanaged>
            <unmanaged-short>DXGI_GRAPHICS_PREEMPTION_PIXEL_BOUNDARY</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.GraphicsPreemptionGranularity.InstructionBoundary">
            <unmanaged>DXGI_GRAPHICS_PREEMPTION_INSTRUCTION_BOUNDARY</unmanaged>
            <unmanaged-short>DXGI_GRAPHICS_PREEMPTION_INSTRUCTION_BOUNDARY</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.HardwareCompositionSupportFlags">
            <unmanaged>DXGI_HARDWARE_COMPOSITION_SUPPORT_FLAGS</unmanaged>
            <unmanaged-short>DXGI_HARDWARE_COMPOSITION_SUPPORT_FLAGS</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.HardwareCompositionSupportFlags.Fullscreen">
            <unmanaged>DXGI_HARDWARE_COMPOSITION_SUPPORT_FLAG_FULLSCREEN</unmanaged>
            <unmanaged-short>DXGI_HARDWARE_COMPOSITION_SUPPORT_FLAG_FULLSCREEN</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.HardwareCompositionSupportFlags.Windowed">
            <unmanaged>DXGI_HARDWARE_COMPOSITION_SUPPORT_FLAG_WINDOWED</unmanaged>
            <unmanaged-short>DXGI_HARDWARE_COMPOSITION_SUPPORT_FLAG_WINDOWED</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.HardwareCompositionSupportFlags.CursorStretched">
            <unmanaged>DXGI_HARDWARE_COMPOSITION_SUPPORT_FLAG_CURSOR_STRETCHED</unmanaged>
            <unmanaged-short>DXGI_HARDWARE_COMPOSITION_SUPPORT_FLAG_CURSOR_STRETCHED</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.HardwareCompositionSupportFlags.None">
            <summary>
            Synthetic NONE value
            </summary>
            <unmanaged>None</unmanaged>
            <unmanaged-short>None</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.HdrMetadataType">
            <unmanaged>DXGI_HDR_METADATA_TYPE</unmanaged>
            <unmanaged-short>DXGI_HDR_METADATA_TYPE</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.HdrMetadataType.None">
            <unmanaged>DXGI_HDR_METADATA_TYPE_NONE</unmanaged>
            <unmanaged-short>DXGI_HDR_METADATA_TYPE_NONE</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.HdrMetadataType.Hdr10">
            <unmanaged>DXGI_HDR_METADATA_TYPE_HDR10</unmanaged>
            <unmanaged-short>DXGI_HDR_METADATA_TYPE_HDR10</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.HdrMetadataType.Hdr10plus">
            <unmanaged>DXGI_HDR_METADATA_TYPE_HDR10PLUS</unmanaged>
            <unmanaged-short>DXGI_HDR_METADATA_TYPE_HDR10PLUS</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.MapFlags">
            <unmanaged>DXGI_MAP_FLAGS</unmanaged>
            <unmanaged-short>DXGI_MAP_FLAGS</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.MapFlags.Read">
            <unmanaged>DXGI_MAP_READ</unmanaged>
            <unmanaged-short>DXGI_MAP_READ</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.MapFlags.Write">
            <unmanaged>DXGI_MAP_WRITE</unmanaged>
            <unmanaged-short>DXGI_MAP_WRITE</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.MapFlags.Discard">
            <unmanaged>DXGI_MAP_DISCARD</unmanaged>
            <unmanaged-short>DXGI_MAP_DISCARD</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.MemorySegmentGroup">
            <unmanaged>DXGI_MEMORY_SEGMENT_GROUP</unmanaged>
            <unmanaged-short>DXGI_MEMORY_SEGMENT_GROUP</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.MemorySegmentGroup.Local">
            <unmanaged>DXGI_MEMORY_SEGMENT_GROUP_LOCAL</unmanaged>
            <unmanaged-short>DXGI_MEMORY_SEGMENT_GROUP_LOCAL</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.MemorySegmentGroup.NonLocal">
            <unmanaged>DXGI_MEMORY_SEGMENT_GROUP_NON_LOCAL</unmanaged>
            <unmanaged-short>DXGI_MEMORY_SEGMENT_GROUP_NON_LOCAL</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.MultiplaneOverlayYCbCrFlags">
            <unmanaged>DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAGS</unmanaged>
            <unmanaged-short>DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAGS</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.MultiplaneOverlayYCbCrFlags.NominalRange">
            <unmanaged>DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAG_NOMINAL_RANGE</unmanaged>
            <unmanaged-short>DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAG_NOMINAL_RANGE</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.MultiplaneOverlayYCbCrFlags.Bt709">
            <unmanaged>DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAG_BT709</unmanaged>
            <unmanaged-short>DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAG_BT709</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.MultiplaneOverlayYCbCrFlags.XvYCC">
            <unmanaged>DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAG_xvYCC</unmanaged>
            <unmanaged-short>DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAG_xvYCC</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.MultiplaneOverlayYCbCrFlags.None">
            <summary>
            Synthetic NONE value
            </summary>
            <unmanaged>None</unmanaged>
            <unmanaged-short>None</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.OfferResourceFlags">
            <unmanaged>DXGI_OFFER_RESOURCE_FLAGS</unmanaged>
            <unmanaged-short>DXGI_OFFER_RESOURCE_FLAGS</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.OfferResourceFlags.AllowDecommit">
            <unmanaged>DXGI_OFFER_RESOURCE_FLAG_ALLOW_DECOMMIT</unmanaged>
            <unmanaged-short>DXGI_OFFER_RESOURCE_FLAG_ALLOW_DECOMMIT</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.OfferResourceFlags.None">
            <summary>
            Synthetic NONE value
            </summary>
            <unmanaged>None</unmanaged>
            <unmanaged-short>None</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.OfferResourcePriority">
            <unmanaged>DXGI_OFFER_RESOURCE_PRIORITY</unmanaged>
            <unmanaged-short>DXGI_OFFER_RESOURCE_PRIORITY</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.OfferResourcePriority.Low">
            <unmanaged>DXGI_OFFER_RESOURCE_PRIORITY_LOW</unmanaged>
            <unmanaged-short>DXGI_OFFER_RESOURCE_PRIORITY_LOW</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.OfferResourcePriority.Normal">
            <unmanaged>DXGI_OFFER_RESOURCE_PRIORITY_NORMAL</unmanaged>
            <unmanaged-short>DXGI_OFFER_RESOURCE_PRIORITY_NORMAL</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.OfferResourcePriority.High">
            <unmanaged>DXGI_OFFER_RESOURCE_PRIORITY_HIGH</unmanaged>
            <unmanaged-short>DXGI_OFFER_RESOURCE_PRIORITY_HIGH</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.OutduplFlag">
            <unmanaged>DXGI_OUTDUPL_FLAG</unmanaged>
            <unmanaged-short>DXGI_OUTDUPL_FLAG</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.OutduplFlag.CompositedUiCaptureOnly">
            <unmanaged>DXGI_OUTDUPL_COMPOSITED_UI_CAPTURE_ONLY</unmanaged>
            <unmanaged-short>DXGI_OUTDUPL_COMPOSITED_UI_CAPTURE_ONLY</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.OutduplFlag.None">
            <summary>
            Synthetic NONE value
            </summary>
            <unmanaged>None</unmanaged>
            <unmanaged-short>None</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.OverlayColorSpaceSupportFlags">
            <unmanaged>DXGI_OVERLAY_COLOR_SPACE_SUPPORT_FLAG</unmanaged>
            <unmanaged-short>DXGI_OVERLAY_COLOR_SPACE_SUPPORT_FLAG</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.OverlayColorSpaceSupportFlags.Present">
            <unmanaged>DXGI_OVERLAY_COLOR_SPACE_SUPPORT_FLAG_PRESENT</unmanaged>
            <unmanaged-short>DXGI_OVERLAY_COLOR_SPACE_SUPPORT_FLAG_PRESENT</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.OverlayColorSpaceSupportFlags.None">
            <summary>
            Synthetic NONE value
            </summary>
            <unmanaged>None</unmanaged>
            <unmanaged-short>None</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.OverlaySupportFlags">
            <unmanaged>DXGI_OVERLAY_SUPPORT_FLAG</unmanaged>
            <unmanaged-short>DXGI_OVERLAY_SUPPORT_FLAG</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.OverlaySupportFlags.Direct">
            <unmanaged>DXGI_OVERLAY_SUPPORT_FLAG_DIRECT</unmanaged>
            <unmanaged-short>DXGI_OVERLAY_SUPPORT_FLAG_DIRECT</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.OverlaySupportFlags.Scaling">
            <unmanaged>DXGI_OVERLAY_SUPPORT_FLAG_SCALING</unmanaged>
            <unmanaged-short>DXGI_OVERLAY_SUPPORT_FLAG_SCALING</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.OverlaySupportFlags.None">
            <summary>
            Synthetic NONE value
            </summary>
            <unmanaged>None</unmanaged>
            <unmanaged-short>None</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.PointerShapeType">
            <unmanaged>DXGI_OUTDUPL_POINTER_SHAPE_TYPE</unmanaged>
            <unmanaged-short>DXGI_OUTDUPL_POINTER_SHAPE_TYPE</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.PointerShapeType.Monochrome">
            <unmanaged>DXGI_OUTDUPL_POINTER_SHAPE_TYPE_MONOCHROME</unmanaged>
            <unmanaged-short>DXGI_OUTDUPL_POINTER_SHAPE_TYPE_MONOCHROME</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.PointerShapeType.Color">
            <unmanaged>DXGI_OUTDUPL_POINTER_SHAPE_TYPE_COLOR</unmanaged>
            <unmanaged-short>DXGI_OUTDUPL_POINTER_SHAPE_TYPE_COLOR</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.PointerShapeType.MaskedColor">
            <unmanaged>DXGI_OUTDUPL_POINTER_SHAPE_TYPE_MASKED_COLOR</unmanaged>
            <unmanaged-short>DXGI_OUTDUPL_POINTER_SHAPE_TYPE_MASKED_COLOR</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.PresentFlags">
            <unmanaged>DXGI_PRESENT_FLAGS</unmanaged>
            <unmanaged-short>DXGI_PRESENT_FLAGS</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.PresentFlags.Test">
            <unmanaged>DXGI_PRESENT_TEST</unmanaged>
            <unmanaged-short>DXGI_PRESENT_TEST</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.PresentFlags.DoNotSequence">
            <unmanaged>DXGI_PRESENT_DO_NOT_SEQUENCE</unmanaged>
            <unmanaged-short>DXGI_PRESENT_DO_NOT_SEQUENCE</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.PresentFlags.Restart">
            <unmanaged>DXGI_PRESENT_RESTART</unmanaged>
            <unmanaged-short>DXGI_PRESENT_RESTART</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.PresentFlags.DoNotWait">
            <unmanaged>DXGI_PRESENT_DO_NOT_WAIT</unmanaged>
            <unmanaged-short>DXGI_PRESENT_DO_NOT_WAIT</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.PresentFlags.StereoPreferRight">
            <unmanaged>DXGI_PRESENT_STEREO_PREFER_RIGHT</unmanaged>
            <unmanaged-short>DXGI_PRESENT_STEREO_PREFER_RIGHT</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.PresentFlags.StereoTemporaryMono">
            <unmanaged>DXGI_PRESENT_STEREO_TEMPORARY_MONO</unmanaged>
            <unmanaged-short>DXGI_PRESENT_STEREO_TEMPORARY_MONO</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.PresentFlags.RestrictToOutput">
            <unmanaged>DXGI_PRESENT_RESTRICT_TO_OUTPUT</unmanaged>
            <unmanaged-short>DXGI_PRESENT_RESTRICT_TO_OUTPUT</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.PresentFlags.UseDuration">
            <unmanaged>DXGI_PRESENT_USE_DURATION</unmanaged>
            <unmanaged-short>DXGI_PRESENT_USE_DURATION</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.PresentFlags.AllowTearing">
            <unmanaged>DXGI_PRESENT_ALLOW_TEARING</unmanaged>
            <unmanaged-short>DXGI_PRESENT_ALLOW_TEARING</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.PresentFlags.None">
            <summary>
            Synthetic NONE value
            </summary>
            <unmanaged>None</unmanaged>
            <unmanaged-short>None</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.ReclaimResourceResults">
            <unmanaged>DXGI_RECLAIM_RESOURCE_RESULTS</unmanaged>
            <unmanaged-short>DXGI_RECLAIM_RESOURCE_RESULTS</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.ReclaimResourceResults.Ok">
            <unmanaged>DXGI_RECLAIM_RESOURCE_RESULT_OK</unmanaged>
            <unmanaged-short>DXGI_RECLAIM_RESOURCE_RESULT_OK</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.ReclaimResourceResults.Discarded">
            <unmanaged>DXGI_RECLAIM_RESOURCE_RESULT_DISCARDED</unmanaged>
            <unmanaged-short>DXGI_RECLAIM_RESOURCE_RESULT_DISCARDED</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.ReclaimResourceResults.NotCommitted">
            <unmanaged>DXGI_RECLAIM_RESOURCE_RESULT_NOT_COMMITTED</unmanaged>
            <unmanaged-short>DXGI_RECLAIM_RESOURCE_RESULT_NOT_COMMITTED</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.Residency">
            <unmanaged>DXGI_RESIDENCY</unmanaged>
            <unmanaged-short>DXGI_RESIDENCY</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.Residency.FullyResident">
            <unmanaged>DXGI_RESIDENCY_FULLY_RESIDENT</unmanaged>
            <unmanaged-short>DXGI_RESIDENCY_FULLY_RESIDENT</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.Residency.ResidentInSharedMemory">
            <unmanaged>DXGI_RESIDENCY_RESIDENT_IN_SHARED_MEMORY</unmanaged>
            <unmanaged-short>DXGI_RESIDENCY_RESIDENT_IN_SHARED_MEMORY</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.Residency.EvictedToDisk">
            <unmanaged>DXGI_RESIDENCY_EVICTED_TO_DISK</unmanaged>
            <unmanaged-short>DXGI_RESIDENCY_EVICTED_TO_DISK</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.ResourcePriority">
            <unmanaged>DXGI_RESOURCE_PRIORITY</unmanaged>
            <unmanaged-short>DXGI_RESOURCE_PRIORITY</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.ResourcePriority.Minimum">
            <unmanaged>DXGI_RESOURCE_PRIORITY_MINIMUM</unmanaged>
            <unmanaged-short>DXGI_RESOURCE_PRIORITY_MINIMUM</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.ResourcePriority.Low">
            <unmanaged>DXGI_RESOURCE_PRIORITY_LOW</unmanaged>
            <unmanaged-short>DXGI_RESOURCE_PRIORITY_LOW</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.ResourcePriority.Normal">
            <unmanaged>DXGI_RESOURCE_PRIORITY_NORMAL</unmanaged>
            <unmanaged-short>DXGI_RESOURCE_PRIORITY_NORMAL</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.ResourcePriority.High">
            <unmanaged>DXGI_RESOURCE_PRIORITY_HIGH</unmanaged>
            <unmanaged-short>DXGI_RESOURCE_PRIORITY_HIGH</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.ResourcePriority.Maximum">
            <unmanaged>DXGI_RESOURCE_PRIORITY_MAXIMUM</unmanaged>
            <unmanaged-short>DXGI_RESOURCE_PRIORITY_MAXIMUM</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.Scaling">
            <unmanaged>DXGI_SCALING</unmanaged>
            <unmanaged-short>DXGI_SCALING</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.Scaling.Stretch">
            <unmanaged>DXGI_SCALING_STRETCH</unmanaged>
            <unmanaged-short>DXGI_SCALING_STRETCH</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.Scaling.None">
            <unmanaged>DXGI_SCALING_NONE</unmanaged>
            <unmanaged-short>DXGI_SCALING_NONE</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.Scaling.AspectRatioStretch">
            <unmanaged>DXGI_SCALING_ASPECT_RATIO_STRETCH</unmanaged>
            <unmanaged-short>DXGI_SCALING_ASPECT_RATIO_STRETCH</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.SharedResourceFlags">
            <unmanaged>DXGI_SHARED_RESOURCE_FLAGS</unmanaged>
            <unmanaged-short>DXGI_SHARED_RESOURCE_FLAGS</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.SharedResourceFlags.Read">
            <unmanaged>DXGI_SHARED_RESOURCE_READ</unmanaged>
            <unmanaged-short>DXGI_SHARED_RESOURCE_READ</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.SharedResourceFlags.Write">
            <unmanaged>DXGI_SHARED_RESOURCE_WRITE</unmanaged>
            <unmanaged-short>DXGI_SHARED_RESOURCE_WRITE</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.SharedResourceFlags.None">
            <summary>
            Synthetic NONE value
            </summary>
            <unmanaged>None</unmanaged>
            <unmanaged-short>None</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.SwapChainColorSpaceSupportFlags">
            <unmanaged>DXGI_SWAP_CHAIN_COLOR_SPACE_SUPPORT_FLAG</unmanaged>
            <unmanaged-short>DXGI_SWAP_CHAIN_COLOR_SPACE_SUPPORT_FLAG</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.SwapChainColorSpaceSupportFlags.Present">
            <unmanaged>DXGI_SWAP_CHAIN_COLOR_SPACE_SUPPORT_FLAG_PRESENT</unmanaged>
            <unmanaged-short>DXGI_SWAP_CHAIN_COLOR_SPACE_SUPPORT_FLAG_PRESENT</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.SwapChainColorSpaceSupportFlags.OverlayPresent">
            <unmanaged>DXGI_SWAP_CHAIN_COLOR_SPACE_SUPPORT_FLAG_OVERLAY_PRESENT</unmanaged>
            <unmanaged-short>DXGI_SWAP_CHAIN_COLOR_SPACE_SUPPORT_FLAG_OVERLAY_PRESENT</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.SwapChainColorSpaceSupportFlags.None">
            <summary>
            Synthetic NONE value
            </summary>
            <unmanaged>None</unmanaged>
            <unmanaged-short>None</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.SwapChainFlags">
            <unmanaged>DXGI_SWAP_CHAIN_FLAG</unmanaged>
            <unmanaged-short>DXGI_SWAP_CHAIN_FLAG</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.SwapChainFlags.Nonprerotated">
            <unmanaged>DXGI_SWAP_CHAIN_FLAG_NONPREROTATED</unmanaged>
            <unmanaged-short>DXGI_SWAP_CHAIN_FLAG_NONPREROTATED</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.SwapChainFlags.AllowModeSwitch">
            <unmanaged>DXGI_SWAP_CHAIN_FLAG_ALLOW_MODE_SWITCH</unmanaged>
            <unmanaged-short>DXGI_SWAP_CHAIN_FLAG_ALLOW_MODE_SWITCH</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.SwapChainFlags.GdiCompatible">
            <unmanaged>DXGI_SWAP_CHAIN_FLAG_GDI_COMPATIBLE</unmanaged>
            <unmanaged-short>DXGI_SWAP_CHAIN_FLAG_GDI_COMPATIBLE</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.SwapChainFlags.RestrictedContent">
            <unmanaged>DXGI_SWAP_CHAIN_FLAG_RESTRICTED_CONTENT</unmanaged>
            <unmanaged-short>DXGI_SWAP_CHAIN_FLAG_RESTRICTED_CONTENT</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.SwapChainFlags.RestrictSharedResourceDriver">
            <unmanaged>DXGI_SWAP_CHAIN_FLAG_RESTRICT_SHARED_RESOURCE_DRIVER</unmanaged>
            <unmanaged-short>DXGI_SWAP_CHAIN_FLAG_RESTRICT_SHARED_RESOURCE_DRIVER</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.SwapChainFlags.DisplayOnly">
            <unmanaged>DXGI_SWAP_CHAIN_FLAG_DISPLAY_ONLY</unmanaged>
            <unmanaged-short>DXGI_SWAP_CHAIN_FLAG_DISPLAY_ONLY</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.SwapChainFlags.FrameLatencyWaitableObject">
            <unmanaged>DXGI_SWAP_CHAIN_FLAG_FRAME_LATENCY_WAITABLE_OBJECT</unmanaged>
            <unmanaged-short>DXGI_SWAP_CHAIN_FLAG_FRAME_LATENCY_WAITABLE_OBJECT</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.SwapChainFlags.ForegroundLayer">
            <unmanaged>DXGI_SWAP_CHAIN_FLAG_FOREGROUND_LAYER</unmanaged>
            <unmanaged-short>DXGI_SWAP_CHAIN_FLAG_FOREGROUND_LAYER</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.SwapChainFlags.FullscreenVideo">
            <unmanaged>DXGI_SWAP_CHAIN_FLAG_FULLSCREEN_VIDEO</unmanaged>
            <unmanaged-short>DXGI_SWAP_CHAIN_FLAG_FULLSCREEN_VIDEO</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.SwapChainFlags.YuvVideo">
            <unmanaged>DXGI_SWAP_CHAIN_FLAG_YUV_VIDEO</unmanaged>
            <unmanaged-short>DXGI_SWAP_CHAIN_FLAG_YUV_VIDEO</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.SwapChainFlags.HwProtected">
            <unmanaged>DXGI_SWAP_CHAIN_FLAG_HW_PROTECTED</unmanaged>
            <unmanaged-short>DXGI_SWAP_CHAIN_FLAG_HW_PROTECTED</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.SwapChainFlags.AllowTearing">
            <unmanaged>DXGI_SWAP_CHAIN_FLAG_ALLOW_TEARING</unmanaged>
            <unmanaged-short>DXGI_SWAP_CHAIN_FLAG_ALLOW_TEARING</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.SwapChainFlags.RestrictedToAllHolographicDisplays">
            <unmanaged>DXGI_SWAP_CHAIN_FLAG_RESTRICTED_TO_ALL_HOLOGRAPHIC_DISPLAYS</unmanaged>
            <unmanaged-short>DXGI_SWAP_CHAIN_FLAG_RESTRICTED_TO_ALL_HOLOGRAPHIC_DISPLAYS</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.SwapChainFlags.None">
            <summary>
            Synthetic NONE value
            </summary>
            <unmanaged>None</unmanaged>
            <unmanaged-short>None</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.SwapEffect">
            <unmanaged>DXGI_SWAP_EFFECT</unmanaged>
            <unmanaged-short>DXGI_SWAP_EFFECT</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.SwapEffect.Discard">
            <unmanaged>DXGI_SWAP_EFFECT_DISCARD</unmanaged>
            <unmanaged-short>DXGI_SWAP_EFFECT_DISCARD</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.SwapEffect.Sequential">
            <unmanaged>DXGI_SWAP_EFFECT_SEQUENTIAL</unmanaged>
            <unmanaged-short>DXGI_SWAP_EFFECT_SEQUENTIAL</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.SwapEffect.FlipSequential">
            <unmanaged>DXGI_SWAP_EFFECT_FLIP_SEQUENTIAL</unmanaged>
            <unmanaged-short>DXGI_SWAP_EFFECT_FLIP_SEQUENTIAL</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.SwapEffect.FlipDiscard">
            <unmanaged>DXGI_SWAP_EFFECT_FLIP_DISCARD</unmanaged>
            <unmanaged-short>DXGI_SWAP_EFFECT_FLIP_DISCARD</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.Usage">
            <unmanaged>DXGI_USAGE_ENUM</unmanaged>
            <unmanaged-short>DXGI_USAGE_ENUM</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.Usage.ShaderInput">
            <unmanaged>DXGI_USAGE_SHADER_INPUT</unmanaged>
            <unmanaged-short>DXGI_USAGE_SHADER_INPUT</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.Usage.RenderTargetOutput">
            <unmanaged>DXGI_USAGE_RENDER_TARGET_OUTPUT</unmanaged>
            <unmanaged-short>DXGI_USAGE_RENDER_TARGET_OUTPUT</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.Usage.Backbuffer">
            <unmanaged>DXGI_USAGE_BACK_BUFFER</unmanaged>
            <unmanaged-short>DXGI_USAGE_BACK_BUFFER</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.Usage.Shared">
            <unmanaged>DXGI_USAGE_SHARED</unmanaged>
            <unmanaged-short>DXGI_USAGE_SHARED</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.Usage.ReadOnly">
            <unmanaged>DXGI_USAGE_READ_ONLY</unmanaged>
            <unmanaged-short>DXGI_USAGE_READ_ONLY</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.Usage.DiscardOnPresent">
            <unmanaged>DXGI_USAGE_DISCARD_ON_PRESENT</unmanaged>
            <unmanaged-short>DXGI_USAGE_DISCARD_ON_PRESENT</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.Usage.UnorderedAccess">
            <unmanaged>DXGI_USAGE_UNORDERED_ACCESS</unmanaged>
            <unmanaged-short>DXGI_USAGE_UNORDERED_ACCESS</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.WindowAssociationFlags">
            <unmanaged>DXGI_MWA_FLAGS</unmanaged>
            <unmanaged-short>DXGI_MWA_FLAGS</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.WindowAssociationFlags.IgnoreAll">
            <unmanaged>DXGI_MWA_NO_WINDOW_CHANGES</unmanaged>
            <unmanaged-short>DXGI_MWA_NO_WINDOW_CHANGES</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.WindowAssociationFlags.IgnoreAltEnter">
            <unmanaged>DXGI_MWA_NO_ALT_ENTER</unmanaged>
            <unmanaged-short>DXGI_MWA_NO_ALT_ENTER</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.WindowAssociationFlags.IgnorePrintScreen">
            <unmanaged>DXGI_MWA_NO_PRINT_SCREEN</unmanaged>
            <unmanaged-short>DXGI_MWA_NO_PRINT_SCREEN</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.WindowAssociationFlags.Valid">
            <unmanaged>DXGI_MWA_VALID</unmanaged>
            <unmanaged-short>DXGI_MWA_VALID</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.WindowAssociationFlags.None">
            <summary>
            Synthetic NONE value
            </summary>
            <unmanaged>None</unmanaged>
            <unmanaged-short>None</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.ResultCode">
            <summary>
            Functions
            </summary>
        </member>
        <member name="F:Vortice.DXGI.ResultCode.InvalidCall">
            <summary>
            Result InvalidCall
            </summary>
            <unmanaged>DXGI_ERROR_INVALID_CALL</unmanaged>
            <unmanaged-short>DXGI_ERROR_INVALID_CALL</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.ResultCode.NotFound">
            <summary>
            Result NotFound
            </summary>
            <unmanaged>DXGI_ERROR_NOT_FOUND</unmanaged>
            <unmanaged-short>DXGI_ERROR_NOT_FOUND</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.ResultCode.MoreData">
            <summary>
            Result MoreData
            </summary>
            <unmanaged>DXGI_ERROR_MORE_DATA</unmanaged>
            <unmanaged-short>DXGI_ERROR_MORE_DATA</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.ResultCode.Unsupported">
            <summary>
            Result Unsupported
            </summary>
            <unmanaged>DXGI_ERROR_UNSUPPORTED</unmanaged>
            <unmanaged-short>DXGI_ERROR_UNSUPPORTED</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.ResultCode.DeviceRemoved">
            <summary>
            Result DeviceRemoved
            </summary>
            <unmanaged>DXGI_ERROR_DEVICE_REMOVED</unmanaged>
            <unmanaged-short>DXGI_ERROR_DEVICE_REMOVED</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.ResultCode.DeviceHung">
            <summary>
            Result DeviceHung
            </summary>
            <unmanaged>DXGI_ERROR_DEVICE_HUNG</unmanaged>
            <unmanaged-short>DXGI_ERROR_DEVICE_HUNG</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.ResultCode.DeviceReset">
            <summary>
            Result DeviceReset
            </summary>
            <unmanaged>DXGI_ERROR_DEVICE_RESET</unmanaged>
            <unmanaged-short>DXGI_ERROR_DEVICE_RESET</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.ResultCode.WasStillDrawing">
            <summary>
            Result WasStillDrawing
            </summary>
            <unmanaged>DXGI_ERROR_WAS_STILL_DRAWING</unmanaged>
            <unmanaged-short>DXGI_ERROR_WAS_STILL_DRAWING</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.ResultCode.FrameStatisticsDisjoint">
            <summary>
            Result FrameStatisticsDisjoint
            </summary>
            <unmanaged>DXGI_ERROR_FRAME_STATISTICS_DISJOINT</unmanaged>
            <unmanaged-short>DXGI_ERROR_FRAME_STATISTICS_DISJOINT</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.ResultCode.GraphicsVidpnSourceInUse">
            <summary>
            Result GraphicsVidpnSourceInUse
            </summary>
            <unmanaged>DXGI_ERROR_GRAPHICS_VIDPN_SOURCE_IN_USE</unmanaged>
            <unmanaged-short>DXGI_ERROR_GRAPHICS_VIDPN_SOURCE_IN_USE</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.ResultCode.DriverInternalError">
            <summary>
            Result DriverInternalError
            </summary>
            <unmanaged>DXGI_ERROR_DRIVER_INTERNAL_ERROR</unmanaged>
            <unmanaged-short>DXGI_ERROR_DRIVER_INTERNAL_ERROR</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.ResultCode.Nonexclusive">
            <summary>
            Result Nonexclusive
            </summary>
            <unmanaged>DXGI_ERROR_NONEXCLUSIVE</unmanaged>
            <unmanaged-short>DXGI_ERROR_NONEXCLUSIVE</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.ResultCode.NotCurrentlyAvailable">
            <summary>
            Result NotCurrentlyAvailable
            </summary>
            <unmanaged>DXGI_ERROR_NOT_CURRENTLY_AVAILABLE</unmanaged>
            <unmanaged-short>DXGI_ERROR_NOT_CURRENTLY_AVAILABLE</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.ResultCode.RemoteClientDisconnected">
            <summary>
            Result RemoteClientDisconnected
            </summary>
            <unmanaged>DXGI_ERROR_REMOTE_CLIENT_DISCONNECTED</unmanaged>
            <unmanaged-short>DXGI_ERROR_REMOTE_CLIENT_DISCONNECTED</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.ResultCode.RemoteOutofmemory">
            <summary>
            Result RemoteOutofmemory
            </summary>
            <unmanaged>DXGI_ERROR_REMOTE_OUTOFMEMORY</unmanaged>
            <unmanaged-short>DXGI_ERROR_REMOTE_OUTOFMEMORY</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.ResultCode.AccessLost">
            <summary>
            Result AccessLost
            </summary>
            <unmanaged>DXGI_ERROR_ACCESS_LOST</unmanaged>
            <unmanaged-short>DXGI_ERROR_ACCESS_LOST</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.ResultCode.WaitTimeout">
            <summary>
            Result WaitTimeout
            </summary>
            <unmanaged>DXGI_ERROR_WAIT_TIMEOUT</unmanaged>
            <unmanaged-short>DXGI_ERROR_WAIT_TIMEOUT</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.ResultCode.SessionDisconnected">
            <summary>
            Result SessionDisconnected
            </summary>
            <unmanaged>DXGI_ERROR_SESSION_DISCONNECTED</unmanaged>
            <unmanaged-short>DXGI_ERROR_SESSION_DISCONNECTED</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.ResultCode.RestrictToOutputStale">
            <summary>
            Result RestrictToOutputStale
            </summary>
            <unmanaged>DXGI_ERROR_RESTRICT_TO_OUTPUT_STALE</unmanaged>
            <unmanaged-short>DXGI_ERROR_RESTRICT_TO_OUTPUT_STALE</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.ResultCode.CannotProtectContent">
            <summary>
            Result CannotProtectContent
            </summary>
            <unmanaged>DXGI_ERROR_CANNOT_PROTECT_CONTENT</unmanaged>
            <unmanaged-short>DXGI_ERROR_CANNOT_PROTECT_CONTENT</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.ResultCode.AccessDenied">
            <summary>
            Result AccessDenied
            </summary>
            <unmanaged>DXGI_ERROR_ACCESS_DENIED</unmanaged>
            <unmanaged-short>DXGI_ERROR_ACCESS_DENIED</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.ResultCode.NameAlreadyExists">
            <summary>
            Result NameAlreadyExists
            </summary>
            <unmanaged>DXGI_ERROR_NAME_ALREADY_EXISTS</unmanaged>
            <unmanaged-short>DXGI_ERROR_NAME_ALREADY_EXISTS</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.ResultCode.SdkComponentMissing">
            <summary>
            Result SdkComponentMissing
            </summary>
            <unmanaged>DXGI_ERROR_SDK_COMPONENT_MISSING</unmanaged>
            <unmanaged-short>DXGI_ERROR_SDK_COMPONENT_MISSING</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.ResultCode.NotCurrent">
            <summary>
            Result NotCurrent
            </summary>
            <unmanaged>DXGI_ERROR_NOT_CURRENT</unmanaged>
            <unmanaged-short>DXGI_ERROR_NOT_CURRENT</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.ResultCode.HwProtectionOutofmemory">
            <summary>
            Result HwProtectionOutofmemory
            </summary>
            <unmanaged>DXGI_ERROR_HW_PROTECTION_OUTOFMEMORY</unmanaged>
            <unmanaged-short>DXGI_ERROR_HW_PROTECTION_OUTOFMEMORY</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.ResultCode.DynamicCodePolicyViolation">
            <summary>
            Result DynamicCodePolicyViolation
            </summary>
            <unmanaged>DXGI_ERROR_DYNAMIC_CODE_POLICY_VIOLATION</unmanaged>
            <unmanaged-short>DXGI_ERROR_DYNAMIC_CODE_POLICY_VIOLATION</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.ResultCode.NonCompositedUi">
            <summary>
            Result NonCompositedUi
            </summary>
            <unmanaged>DXGI_ERROR_NON_COMPOSITED_UI</unmanaged>
            <unmanaged-short>DXGI_ERROR_NON_COMPOSITED_UI</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.ResultCode.ModeChangeInProgress">
            <summary>
            Result ModeChangeInProgress
            </summary>
            <unmanaged>DXGI_ERROR_MODE_CHANGE_IN_PROGRESS</unmanaged>
            <unmanaged-short>DXGI_ERROR_MODE_CHANGE_IN_PROGRESS</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.ResultCode.CacheCorrupt">
            <summary>
            Result CacheCorrupt
            </summary>
            <unmanaged>DXGI_ERROR_CACHE_CORRUPT</unmanaged>
            <unmanaged-short>DXGI_ERROR_CACHE_CORRUPT</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.ResultCode.CacheFull">
            <summary>
            Result CacheFull
            </summary>
            <unmanaged>DXGI_ERROR_CACHE_FULL</unmanaged>
            <unmanaged-short>DXGI_ERROR_CACHE_FULL</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.ResultCode.CacheHashCollision">
            <summary>
            Result CacheHashCollision
            </summary>
            <unmanaged>DXGI_ERROR_CACHE_HASH_COLLISION</unmanaged>
            <unmanaged-short>DXGI_ERROR_CACHE_HASH_COLLISION</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.ResultCode.AlreadyExists">
            <summary>
            Result AlreadyExists
            </summary>
            <unmanaged>DXGI_ERROR_ALREADY_EXISTS</unmanaged>
            <unmanaged-short>DXGI_ERROR_ALREADY_EXISTS</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.IDXGIAdapter1">
            <unmanaged>IDXGIAdapter1</unmanaged>
            <unmanaged-short>IDXGIAdapter1</unmanaged-short>
        </member>
        <member name="P:Vortice.DXGI.IDXGIAdapter1.Description1">
            <unmanaged>HRESULT IDXGIAdapter1::GetDesc1([Out] DXGI_ADAPTER_DESC1* pDesc)</unmanaged>
            <unmanaged-short>IDXGIAdapter1::GetDesc1</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIAdapter1.GetDescription1">
            <unmanaged>HRESULT IDXGIAdapter1::GetDesc1([Out] DXGI_ADAPTER_DESC1* pDesc)</unmanaged>
            <unmanaged-short>IDXGIAdapter1::GetDesc1</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.IDXGIAdapter2">
            <unmanaged>IDXGIAdapter2</unmanaged>
            <unmanaged-short>IDXGIAdapter2</unmanaged-short>
        </member>
        <member name="P:Vortice.DXGI.IDXGIAdapter2.Description2">
            <unmanaged>HRESULT IDXGIAdapter2::GetDesc2([Out] DXGI_ADAPTER_DESC2* pDesc)</unmanaged>
            <unmanaged-short>IDXGIAdapter2::GetDesc2</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIAdapter2.GetDescription2">
            <unmanaged>HRESULT IDXGIAdapter2::GetDesc2([Out] DXGI_ADAPTER_DESC2* pDesc)</unmanaged>
            <unmanaged-short>IDXGIAdapter2::GetDesc2</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.IDXGIAdapter3">
            <unmanaged>IDXGIAdapter3</unmanaged>
            <unmanaged-short>IDXGIAdapter3</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIAdapter3.RegisterHardwareContentProtectionTeardownStatusEvent(System.IntPtr)">
            <unmanaged>HRESULT IDXGIAdapter3::RegisterHardwareContentProtectionTeardownStatusEvent([In] HANDLE hEvent, [Out] DWORD* pdwCookie)</unmanaged>
            <unmanaged-short>IDXGIAdapter3::RegisterHardwareContentProtectionTeardownStatusEvent</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIAdapter3.UnregisterHardwareContentProtectionTeardownStatus(System.Int32)">
            <unmanaged>void IDXGIAdapter3::UnregisterHardwareContentProtectionTeardownStatus([In] DWORD dwCookie)</unmanaged>
            <unmanaged-short>IDXGIAdapter3::UnregisterHardwareContentProtectionTeardownStatus</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIAdapter3.QueryVideoMemoryInfo(System.Int32,Vortice.DXGI.MemorySegmentGroup)">
            <unmanaged>HRESULT IDXGIAdapter3::QueryVideoMemoryInfo([In] UINT NodeIndex, [In] DXGI_MEMORY_SEGMENT_GROUP MemorySegmentGroup, [Out] DXGI_QUERY_VIDEO_MEMORY_INFO* pVideoMemoryInfo)</unmanaged>
            <unmanaged-short>IDXGIAdapter3::QueryVideoMemoryInfo</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIAdapter3.SetVideoMemoryReservation(System.Int32,Vortice.DXGI.MemorySegmentGroup,System.UInt64)">
            <unmanaged>HRESULT IDXGIAdapter3::SetVideoMemoryReservation([In] UINT NodeIndex, [In] DXGI_MEMORY_SEGMENT_GROUP MemorySegmentGroup, [In] unsigned long long Reservation)</unmanaged>
            <unmanaged-short>IDXGIAdapter3::SetVideoMemoryReservation</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIAdapter3.RegisterVideoMemoryBudgetChangeNotificationEvent(System.IntPtr)">
            <unmanaged>HRESULT IDXGIAdapter3::RegisterVideoMemoryBudgetChangeNotificationEvent([In] HANDLE hEvent, [Out] DWORD* pdwCookie)</unmanaged>
            <unmanaged-short>IDXGIAdapter3::RegisterVideoMemoryBudgetChangeNotificationEvent</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIAdapter3.UnregisterVideoMemoryBudgetChangeNotification(System.Int32)">
            <unmanaged>void IDXGIAdapter3::UnregisterVideoMemoryBudgetChangeNotification([In] DWORD dwCookie)</unmanaged>
            <unmanaged-short>IDXGIAdapter3::UnregisterVideoMemoryBudgetChangeNotification</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.IDXGIAdapter4">
            <unmanaged>IDXGIAdapter4</unmanaged>
            <unmanaged-short>IDXGIAdapter4</unmanaged-short>
        </member>
        <member name="P:Vortice.DXGI.IDXGIAdapter4.Description3">
            <unmanaged>HRESULT IDXGIAdapter4::GetDesc3([Out] DXGI_ADAPTER_DESC3* pDesc)</unmanaged>
            <unmanaged-short>IDXGIAdapter4::GetDesc3</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIAdapter4.GetDescription3">
            <unmanaged>HRESULT IDXGIAdapter4::GetDesc3([Out] DXGI_ADAPTER_DESC3* pDesc)</unmanaged>
            <unmanaged-short>IDXGIAdapter4::GetDesc3</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.IDXGIDevice1">
            <unmanaged>IDXGIDevice1</unmanaged>
            <unmanaged-short>IDXGIDevice1</unmanaged-short>
        </member>
        <member name="P:Vortice.DXGI.IDXGIDevice1.MaximumFrameLatency">
            <unmanaged>HRESULT IDXGIDevice1::GetMaximumFrameLatency([Out] UINT* pMaxLatency) / HRESULT IDXGIDevice1::SetMaximumFrameLatency([In] UINT MaxLatency)</unmanaged>
            <unmanaged-short>IDXGIDevice1::GetMaximumFrameLatency / IDXGIDevice1::SetMaximumFrameLatency</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIDevice1.SetMaximumFrameLatency(System.Int32)">
            <unmanaged>HRESULT IDXGIDevice1::SetMaximumFrameLatency([In] UINT MaxLatency)</unmanaged>
            <unmanaged-short>IDXGIDevice1::SetMaximumFrameLatency</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIDevice1.GetMaximumFrameLatency">
            <unmanaged>HRESULT IDXGIDevice1::GetMaximumFrameLatency([Out] UINT* pMaxLatency)</unmanaged>
            <unmanaged-short>IDXGIDevice1::GetMaximumFrameLatency</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.IDXGIDevice2">
            <unmanaged>IDXGIDevice2</unmanaged>
            <unmanaged-short>IDXGIDevice2</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIDevice2.OfferResources(System.Int32,Vortice.DXGI.IDXGIResource[],Vortice.DXGI.OfferResourcePriority)">
            <unmanaged>HRESULT IDXGIDevice2::OfferResources([In] UINT NumResources, [In, Buffer] const IDXGIResource** ppResources, [In] DXGI_OFFER_RESOURCE_PRIORITY Priority)</unmanaged>
            <unmanaged-short>IDXGIDevice2::OfferResources</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIDevice2.ReclaimResources(System.Int32,Vortice.DXGI.IDXGIResource[],SharpGen.Runtime.RawBool[])">
            <unmanaged>HRESULT IDXGIDevice2::ReclaimResources([In] UINT NumResources, [In, Buffer] const IDXGIResource** ppResources, [Out, Buffer, Optional] BOOL* pDiscarded)</unmanaged>
            <unmanaged-short>IDXGIDevice2::ReclaimResources</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIDevice2.EnqueueSetEvent(System.IntPtr)">
            <unmanaged>HRESULT IDXGIDevice2::EnqueueSetEvent([In] HANDLE hEvent)</unmanaged>
            <unmanaged-short>IDXGIDevice2::EnqueueSetEvent</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIDevice2.OfferResources(System.Int32,SharpGen.Runtime.InterfaceArray{Vortice.DXGI.IDXGIResource},Vortice.DXGI.OfferResourcePriority)">
            <unmanaged>HRESULT IDXGIDevice2::OfferResources([In] UINT NumResources, [In, Buffer] const IDXGIResource** ppResources, [In] DXGI_OFFER_RESOURCE_PRIORITY Priority)</unmanaged>
            <unmanaged-short>IDXGIDevice2::OfferResources</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIDevice2.OfferResources(System.Int32,System.IntPtr,Vortice.DXGI.OfferResourcePriority)">
            <unmanaged>HRESULT IDXGIDevice2::OfferResources([In] UINT NumResources, [In, Buffer] const IDXGIResource** ppResources, [In] DXGI_OFFER_RESOURCE_PRIORITY Priority)</unmanaged>
            <unmanaged-short>IDXGIDevice2::OfferResources</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIDevice2.ReclaimResources(System.Int32,SharpGen.Runtime.InterfaceArray{Vortice.DXGI.IDXGIResource},SharpGen.Runtime.RawBool[])">
            <unmanaged>HRESULT IDXGIDevice2::ReclaimResources([In] UINT NumResources, [In, Buffer] const IDXGIResource** ppResources, [Out, Buffer, Optional] BOOL* pDiscarded)</unmanaged>
            <unmanaged-short>IDXGIDevice2::ReclaimResources</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIDevice2.ReclaimResources(System.Int32,System.IntPtr,System.IntPtr)">
            <unmanaged>HRESULT IDXGIDevice2::ReclaimResources([In] UINT NumResources, [In, Buffer] const IDXGIResource** ppResources, [Out, Buffer, Optional] BOOL* pDiscarded)</unmanaged>
            <unmanaged-short>IDXGIDevice2::ReclaimResources</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.IDXGIDevice3">
            <unmanaged>IDXGIDevice3</unmanaged>
            <unmanaged-short>IDXGIDevice3</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIDevice3.Trim">
            <unmanaged>void IDXGIDevice3::Trim()</unmanaged>
            <unmanaged-short>IDXGIDevice3::Trim</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.IDXGIDevice4">
            <unmanaged>IDXGIDevice4</unmanaged>
            <unmanaged-short>IDXGIDevice4</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIDevice4.OfferResources1(System.Int32,Vortice.DXGI.IDXGIResource[],Vortice.DXGI.OfferResourcePriority,System.Int32)">
            <unmanaged>HRESULT IDXGIDevice4::OfferResources1([In] UINT NumResources, [In, Buffer] const IDXGIResource** ppResources, [In] DXGI_OFFER_RESOURCE_PRIORITY Priority, [In] UINT Flags)</unmanaged>
            <unmanaged-short>IDXGIDevice4::OfferResources1</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIDevice4.ReclaimResources1(System.Int32,Vortice.DXGI.IDXGIResource[],Vortice.DXGI.ReclaimResourceResults[])">
            <unmanaged>HRESULT IDXGIDevice4::ReclaimResources1([In] UINT NumResources, [In, Buffer] const IDXGIResource** ppResources, [Out, Buffer] DXGI_RECLAIM_RESOURCE_RESULTS* pResults)</unmanaged>
            <unmanaged-short>IDXGIDevice4::ReclaimResources1</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIDevice4.OfferResources1(System.Int32,SharpGen.Runtime.InterfaceArray{Vortice.DXGI.IDXGIResource},Vortice.DXGI.OfferResourcePriority,System.Int32)">
            <unmanaged>HRESULT IDXGIDevice4::OfferResources1([In] UINT NumResources, [In, Buffer] const IDXGIResource** ppResources, [In] DXGI_OFFER_RESOURCE_PRIORITY Priority, [In] UINT Flags)</unmanaged>
            <unmanaged-short>IDXGIDevice4::OfferResources1</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIDevice4.OfferResources1(System.Int32,System.IntPtr,Vortice.DXGI.OfferResourcePriority,System.Int32)">
            <unmanaged>HRESULT IDXGIDevice4::OfferResources1([In] UINT NumResources, [In, Buffer] const IDXGIResource** ppResources, [In] DXGI_OFFER_RESOURCE_PRIORITY Priority, [In] UINT Flags)</unmanaged>
            <unmanaged-short>IDXGIDevice4::OfferResources1</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIDevice4.ReclaimResources1(System.Int32,SharpGen.Runtime.InterfaceArray{Vortice.DXGI.IDXGIResource},Vortice.DXGI.ReclaimResourceResults[])">
            <unmanaged>HRESULT IDXGIDevice4::ReclaimResources1([In] UINT NumResources, [In, Buffer] const IDXGIResource** ppResources, [Out, Buffer] DXGI_RECLAIM_RESOURCE_RESULTS* pResults)</unmanaged>
            <unmanaged-short>IDXGIDevice4::ReclaimResources1</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIDevice4.ReclaimResources1(System.Int32,System.IntPtr,System.IntPtr)">
            <unmanaged>HRESULT IDXGIDevice4::ReclaimResources1([In] UINT NumResources, [In, Buffer] const IDXGIResource** ppResources, [Out, Buffer] DXGI_RECLAIM_RESOURCE_RESULTS* pResults)</unmanaged>
            <unmanaged-short>IDXGIDevice4::ReclaimResources1</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.IDXGIDisplayControl">
            <unmanaged>IDXGIDisplayControl</unmanaged>
            <unmanaged-short>IDXGIDisplayControl</unmanaged-short>
        </member>
        <member name="P:Vortice.DXGI.IDXGIDisplayControl.IsStereoEnabled">
            <unmanaged>BOOL IDXGIDisplayControl::IsStereoEnabled()</unmanaged>
            <unmanaged-short>IDXGIDisplayControl::IsStereoEnabled</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIDisplayControl.IsStereoEnabled_">
            <unmanaged>BOOL IDXGIDisplayControl::IsStereoEnabled()</unmanaged>
            <unmanaged-short>IDXGIDisplayControl::IsStereoEnabled</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIDisplayControl.SetStereoEnabled(SharpGen.Runtime.RawBool)">
            <unmanaged>void IDXGIDisplayControl::SetStereoEnabled([In] BOOL enabled)</unmanaged>
            <unmanaged-short>IDXGIDisplayControl::SetStereoEnabled</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.IDXGIFactory3">
            <unmanaged>IDXGIFactory3</unmanaged>
            <unmanaged-short>IDXGIFactory3</unmanaged-short>
        </member>
        <member name="P:Vortice.DXGI.IDXGIFactory3.CreationFlags">
            <unmanaged>UINT IDXGIFactory3::GetCreationFlags()</unmanaged>
            <unmanaged-short>IDXGIFactory3::GetCreationFlags</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIFactory3.GetCreationFlags">
            <unmanaged>UINT IDXGIFactory3::GetCreationFlags()</unmanaged>
            <unmanaged-short>IDXGIFactory3::GetCreationFlags</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.IDXGIKeyedMutex">
            <unmanaged>IDXGIKeyedMutex</unmanaged>
            <unmanaged-short>IDXGIKeyedMutex</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIKeyedMutex.AcquireSync(System.UInt64,System.Int32)">
            <unmanaged>HRESULT IDXGIKeyedMutex::AcquireSync([In] unsigned long long Key, [In] DWORD dwMilliseconds)</unmanaged>
            <unmanaged-short>IDXGIKeyedMutex::AcquireSync</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIKeyedMutex.ReleaseSync(System.UInt64)">
            <unmanaged>HRESULT IDXGIKeyedMutex::ReleaseSync([In] unsigned long long Key)</unmanaged>
            <unmanaged-short>IDXGIKeyedMutex::ReleaseSync</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.IDXGIOutput2">
            <unmanaged>IDXGIOutput2</unmanaged>
            <unmanaged-short>IDXGIOutput2</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIOutput2.SupportsOverlays">
            <unmanaged>BOOL IDXGIOutput2::SupportsOverlays()</unmanaged>
            <unmanaged-short>IDXGIOutput2::SupportsOverlays</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.IDXGIOutput6">
            <unmanaged>IDXGIOutput6</unmanaged>
            <unmanaged-short>IDXGIOutput6</unmanaged-short>
        </member>
        <member name="P:Vortice.DXGI.IDXGIOutput6.Description1">
            <unmanaged>HRESULT IDXGIOutput6::GetDesc1([Out] DXGI_OUTPUT_DESC1* pDesc)</unmanaged>
            <unmanaged-short>IDXGIOutput6::GetDesc1</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIOutput6.GetDescription1">
            <unmanaged>HRESULT IDXGIOutput6::GetDesc1([Out] DXGI_OUTPUT_DESC1* pDesc)</unmanaged>
            <unmanaged-short>IDXGIOutput6::GetDesc1</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIOutput6.CheckHardwareCompositionSupport">
            <unmanaged>HRESULT IDXGIOutput6::CheckHardwareCompositionSupport([Out] UINT* pFlags)</unmanaged>
            <unmanaged-short>IDXGIOutput6::CheckHardwareCompositionSupport</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.IDXGIOutputDuplication">
            <unmanaged>IDXGIOutputDuplication</unmanaged>
            <unmanaged-short>IDXGIOutputDuplication</unmanaged-short>
        </member>
        <member name="P:Vortice.DXGI.IDXGIOutputDuplication.Description">
            <unmanaged>void IDXGIOutputDuplication::GetDesc([Out] DXGI_OUTDUPL_DESC* pDesc)</unmanaged>
            <unmanaged-short>IDXGIOutputDuplication::GetDesc</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIOutputDuplication.GetDescription">
            <unmanaged>void IDXGIOutputDuplication::GetDesc([Out] DXGI_OUTDUPL_DESC* pDesc)</unmanaged>
            <unmanaged-short>IDXGIOutputDuplication::GetDesc</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIOutputDuplication.AcquireNextFrame(System.Int32,Vortice.DXGI.OutduplFrameInfo@,Vortice.DXGI.IDXGIResource@)">
            <unmanaged>HRESULT IDXGIOutputDuplication::AcquireNextFrame([In] UINT TimeoutInMilliseconds, [Out] DXGI_OUTDUPL_FRAME_INFO* pFrameInfo, [Out] IDXGIResource** ppDesktopResource)</unmanaged>
            <unmanaged-short>IDXGIOutputDuplication::AcquireNextFrame</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIOutputDuplication.GetFrameDirtyRects(System.Int32,Vortice.RawRect[],System.Int32@)">
            <unmanaged>HRESULT IDXGIOutputDuplication::GetFrameDirtyRects([In] UINT DirtyRectsBufferSize, [Out, Buffer] RECT* pDirtyRectsBuffer, [Out] UINT* pDirtyRectsBufferSizeRequired)</unmanaged>
            <unmanaged-short>IDXGIOutputDuplication::GetFrameDirtyRects</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIOutputDuplication.GetFrameMoveRects(System.Int32,Vortice.DXGI.OutduplMoveRect[],System.Int32@)">
            <unmanaged>HRESULT IDXGIOutputDuplication::GetFrameMoveRects([In] UINT MoveRectsBufferSize, [Out, Buffer] DXGI_OUTDUPL_MOVE_RECT* pMoveRectBuffer, [Out] UINT* pMoveRectsBufferSizeRequired)</unmanaged>
            <unmanaged-short>IDXGIOutputDuplication::GetFrameMoveRects</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIOutputDuplication.GetFramePointerShape(System.Int32,System.IntPtr,System.Int32@,Vortice.DXGI.OutduplPointerShapeInfo@)">
            <unmanaged>HRESULT IDXGIOutputDuplication::GetFramePointerShape([In] UINT PointerShapeBufferSize, [Out, Buffer] void* pPointerShapeBuffer, [Out] UINT* pPointerShapeBufferSizeRequired, [Out] DXGI_OUTDUPL_POINTER_SHAPE_INFO* pPointerShapeInfo)</unmanaged>
            <unmanaged-short>IDXGIOutputDuplication::GetFramePointerShape</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIOutputDuplication.MapDesktopSurface">
            <unmanaged>HRESULT IDXGIOutputDuplication::MapDesktopSurface([Out] DXGI_MAPPED_RECT* pLockedRect)</unmanaged>
            <unmanaged-short>IDXGIOutputDuplication::MapDesktopSurface</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIOutputDuplication.UnMapDesktopSurface">
            <unmanaged>HRESULT IDXGIOutputDuplication::UnMapDesktopSurface()</unmanaged>
            <unmanaged-short>IDXGIOutputDuplication::UnMapDesktopSurface</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIOutputDuplication.ReleaseFrame">
            <unmanaged>HRESULT IDXGIOutputDuplication::ReleaseFrame()</unmanaged>
            <unmanaged-short>IDXGIOutputDuplication::ReleaseFrame</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.IDXGIResource">
            <unmanaged>IDXGIResource</unmanaged>
            <unmanaged-short>IDXGIResource</unmanaged-short>
        </member>
        <member name="P:Vortice.DXGI.IDXGIResource.SharedHandle">
            <unmanaged>HRESULT IDXGIResource::GetSharedHandle([Out] HANDLE* pSharedHandle)</unmanaged>
            <unmanaged-short>IDXGIResource::GetSharedHandle</unmanaged-short>
        </member>
        <member name="P:Vortice.DXGI.IDXGIResource.Usage">
            <unmanaged>HRESULT IDXGIResource::GetUsage([Out] UINT* pUsage)</unmanaged>
            <unmanaged-short>IDXGIResource::GetUsage</unmanaged-short>
        </member>
        <member name="P:Vortice.DXGI.IDXGIResource.EvictionPriority">
            <unmanaged>HRESULT IDXGIResource::GetEvictionPriority([Out] UINT* pEvictionPriority) / HRESULT IDXGIResource::SetEvictionPriority([In] UINT EvictionPriority)</unmanaged>
            <unmanaged-short>IDXGIResource::GetEvictionPriority / IDXGIResource::SetEvictionPriority</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIResource.GetSharedHandle">
            <unmanaged>HRESULT IDXGIResource::GetSharedHandle([Out] HANDLE* pSharedHandle)</unmanaged>
            <unmanaged-short>IDXGIResource::GetSharedHandle</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIResource.GetUsage">
            <unmanaged>HRESULT IDXGIResource::GetUsage([Out] UINT* pUsage)</unmanaged>
            <unmanaged-short>IDXGIResource::GetUsage</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIResource.SetEvictionPriority(System.Int32)">
            <unmanaged>HRESULT IDXGIResource::SetEvictionPriority([In] UINT EvictionPriority)</unmanaged>
            <unmanaged-short>IDXGIResource::SetEvictionPriority</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIResource.GetEvictionPriority">
            <unmanaged>HRESULT IDXGIResource::GetEvictionPriority([Out] UINT* pEvictionPriority)</unmanaged>
            <unmanaged-short>IDXGIResource::GetEvictionPriority</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.IDXGIResource1">
            <unmanaged>IDXGIResource1</unmanaged>
            <unmanaged-short>IDXGIResource1</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIResource1.CreateSubresourceSurface(System.Int32)">
            <unmanaged>HRESULT IDXGIResource1::CreateSubresourceSurface([In] UINT index, [Out] IDXGISurface2** ppSurface)</unmanaged>
            <unmanaged-short>IDXGIResource1::CreateSubresourceSurface</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGIResource1.CreateSharedHandle(System.Nullable{SharpGen.Runtime.Win32.SecurityAttributes},Vortice.DXGI.SharedResourceFlags,System.String)">
            <unmanaged>HRESULT IDXGIResource1::CreateSharedHandle([In, Optional] const SECURITY_ATTRIBUTES* pAttributes, [In] DWORD dwAccess, [In, Optional] const wchar_t* lpName, [Out] HANDLE* pHandle)</unmanaged>
            <unmanaged-short>IDXGIResource1::CreateSharedHandle</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.IDXGISurface">
            <unmanaged>IDXGISurface</unmanaged>
            <unmanaged-short>IDXGISurface</unmanaged-short>
        </member>
        <member name="P:Vortice.DXGI.IDXGISurface.Description">
            <unmanaged>HRESULT IDXGISurface::GetDesc([Out] DXGI_SURFACE_DESC* pDesc)</unmanaged>
            <unmanaged-short>IDXGISurface::GetDesc</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGISurface.GetDescription">
            <unmanaged>HRESULT IDXGISurface::GetDesc([Out] DXGI_SURFACE_DESC* pDesc)</unmanaged>
            <unmanaged-short>IDXGISurface::GetDesc</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGISurface.Map(Vortice.DXGI.MapFlags)">
            <unmanaged>HRESULT IDXGISurface::Map([Out] DXGI_MAPPED_RECT* pLockedRect, [In] UINT MapFlags)</unmanaged>
            <unmanaged-short>IDXGISurface::Map</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGISurface.Unmap">
            <unmanaged>HRESULT IDXGISurface::Unmap()</unmanaged>
            <unmanaged-short>IDXGISurface::Unmap</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.IDXGISurface1">
            <unmanaged>IDXGISurface1</unmanaged>
            <unmanaged-short>IDXGISurface1</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGISurface1.GetDC(SharpGen.Runtime.RawBool)">
            <unmanaged>HRESULT IDXGISurface1::GetDC([In] BOOL Discard, [Out] HDC* phdc)</unmanaged>
            <unmanaged-short>IDXGISurface1::GetDC</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGISurface1.ReleaseDC(System.Nullable{Vortice.RawRect})">
            <unmanaged>HRESULT IDXGISurface1::ReleaseDC([In, Optional] RECT* pDirtyRect)</unmanaged>
            <unmanaged-short>IDXGISurface1::ReleaseDC</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.IDXGISwapChainMedia">
            <unmanaged>IDXGISwapChainMedia</unmanaged>
            <unmanaged-short>IDXGISwapChainMedia</unmanaged-short>
        </member>
        <member name="P:Vortice.DXGI.IDXGISwapChainMedia.FrameStatisticsMedia">
            <unmanaged>HRESULT IDXGISwapChainMedia::GetFrameStatisticsMedia([Out] DXGI_FRAME_STATISTICS_MEDIA* pStats)</unmanaged>
            <unmanaged-short>IDXGISwapChainMedia::GetFrameStatisticsMedia</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGISwapChainMedia.GetFrameStatisticsMedia">
            <unmanaged>HRESULT IDXGISwapChainMedia::GetFrameStatisticsMedia([Out] DXGI_FRAME_STATISTICS_MEDIA* pStats)</unmanaged>
            <unmanaged-short>IDXGISwapChainMedia::GetFrameStatisticsMedia</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGISwapChainMedia.SetPresentDuration(System.Int32)">
            <unmanaged>HRESULT IDXGISwapChainMedia::SetPresentDuration([In] UINT Duration)</unmanaged>
            <unmanaged-short>IDXGISwapChainMedia::SetPresentDuration</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGISwapChainMedia.CheckPresentDurationSupport(System.Int32,System.Int32@,System.Int32@)">
            <unmanaged>HRESULT IDXGISwapChainMedia::CheckPresentDurationSupport([In] UINT DesiredPresentDuration, [Out] UINT* pClosestSmallerPresentDuration, [Out] UINT* pClosestLargerPresentDuration)</unmanaged>
            <unmanaged-short>IDXGISwapChainMedia::CheckPresentDurationSupport</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.IDXGraphicsAnalysis">
            <unmanaged>IDXGraphicsAnalysis</unmanaged>
            <unmanaged-short>IDXGraphicsAnalysis</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGraphicsAnalysis.BeginCapture">
            <unmanaged>void IDXGraphicsAnalysis::BeginCapture()</unmanaged>
            <unmanaged-short>IDXGraphicsAnalysis::BeginCapture</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IDXGraphicsAnalysis.EndCapture">
            <unmanaged>void IDXGraphicsAnalysis::EndCapture()</unmanaged>
            <unmanaged-short>IDXGraphicsAnalysis::EndCapture</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.ISurfaceImageSourceManagerNative">
            <unmanaged>ISurfaceImageSourceManagerNative</unmanaged>
            <unmanaged-short>ISurfaceImageSourceManagerNative</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.ISurfaceImageSourceManagerNative.FlushAllSurfacesWithDevice(SharpGen.Runtime.IUnknown)">
            <unmanaged>HRESULT ISurfaceImageSourceManagerNative::FlushAllSurfacesWithDevice([In] IUnknown* device)</unmanaged>
            <unmanaged-short>ISurfaceImageSourceManagerNative::FlushAllSurfacesWithDevice</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.ISurfaceImageSourceNative">
            <unmanaged>ISurfaceImageSourceNative</unmanaged>
            <unmanaged-short>ISurfaceImageSourceNative</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.ISurfaceImageSourceNative.SetDevice(Vortice.DXGI.IDXGIDevice)">
            <unmanaged>HRESULT ISurfaceImageSourceNative::SetDevice([In] IDXGIDevice* device)</unmanaged>
            <unmanaged-short>ISurfaceImageSourceNative::SetDevice</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.ISurfaceImageSourceNative.BeginDraw(Vortice.RawRect,Vortice.DXGI.IDXGISurface@,System.Drawing.Point@)">
            <unmanaged>HRESULT ISurfaceImageSourceNative::BeginDraw([In] RECT updateRect, [Out] IDXGISurface** surface, [Out] POINT* offset)</unmanaged>
            <unmanaged-short>ISurfaceImageSourceNative::BeginDraw</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.ISurfaceImageSourceNative.EndDraw">
            <unmanaged>HRESULT ISurfaceImageSourceNative::EndDraw()</unmanaged>
            <unmanaged-short>ISurfaceImageSourceNative::EndDraw</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.ISurfaceImageSourceNativeWithD2D">
            <unmanaged>ISurfaceImageSourceNativeWithD2D</unmanaged>
            <unmanaged-short>ISurfaceImageSourceNativeWithD2D</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.ISurfaceImageSourceNativeWithD2D.SetDevice(SharpGen.Runtime.IUnknown)">
            <unmanaged>HRESULT ISurfaceImageSourceNativeWithD2D::SetDevice([In] IUnknown* device)</unmanaged>
            <unmanaged-short>ISurfaceImageSourceNativeWithD2D::SetDevice</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.ISurfaceImageSourceNativeWithD2D.BeginDraw(Vortice.RawRect,System.Guid,System.IntPtr@,System.Drawing.Point@)">
            <unmanaged>HRESULT ISurfaceImageSourceNativeWithD2D::BeginDraw([In] const RECT&amp; updateRect, [In] const GUID&amp; iid, [Out] void** updateObject, [Out] POINT* offset)</unmanaged>
            <unmanaged-short>ISurfaceImageSourceNativeWithD2D::BeginDraw</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.ISurfaceImageSourceNativeWithD2D.EndDraw">
            <unmanaged>HRESULT ISurfaceImageSourceNativeWithD2D::EndDraw()</unmanaged>
            <unmanaged-short>ISurfaceImageSourceNativeWithD2D::EndDraw</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.ISurfaceImageSourceNativeWithD2D.SuspendDraw">
            <unmanaged>HRESULT ISurfaceImageSourceNativeWithD2D::SuspendDraw()</unmanaged>
            <unmanaged-short>ISurfaceImageSourceNativeWithD2D::SuspendDraw</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.ISurfaceImageSourceNativeWithD2D.ResumeDraw">
            <unmanaged>HRESULT ISurfaceImageSourceNativeWithD2D::ResumeDraw()</unmanaged>
            <unmanaged-short>ISurfaceImageSourceNativeWithD2D::ResumeDraw</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.ISwapChainBackgroundPanelNative">
            <unmanaged>ISwapChainBackgroundPanelNative</unmanaged>
            <unmanaged-short>ISwapChainBackgroundPanelNative</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.ISwapChainBackgroundPanelNative.SetSwapChain(Vortice.DXGI.IDXGISwapChain)">
            <unmanaged>HRESULT ISwapChainBackgroundPanelNative::SetSwapChain([In] IDXGISwapChain* swapChain)</unmanaged>
            <unmanaged-short>ISwapChainBackgroundPanelNative::SetSwapChain</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.ISwapChainPanelNative">
            <unmanaged>ISwapChainPanelNative</unmanaged>
            <unmanaged-short>ISwapChainPanelNative</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.ISwapChainPanelNative.SetSwapChain(Vortice.DXGI.IDXGISwapChain)">
            <unmanaged>HRESULT ISwapChainPanelNative::SetSwapChain([In] IDXGISwapChain* swapChain)</unmanaged>
            <unmanaged-short>ISwapChainPanelNative::SetSwapChain</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.ISwapChainPanelNative2">
            <unmanaged>ISwapChainPanelNative2</unmanaged>
            <unmanaged-short>ISwapChainPanelNative2</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.ISwapChainPanelNative2.SetSwapChainHandle(System.IntPtr)">
            <unmanaged>HRESULT ISwapChainPanelNative2::SetSwapChainHandle([In] HANDLE swapChainHandle)</unmanaged>
            <unmanaged-short>ISwapChainPanelNative2::SetSwapChainHandle</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.IVirtualSurfaceUpdatesCallbackNative">
            <unmanaged>IVirtualSurfaceUpdatesCallbackNative</unmanaged>
            <unmanaged-short>IVirtualSurfaceUpdatesCallbackNative</unmanaged-short>
        </member>
        <member name="M:Vortice.DXGI.IVirtualSurfaceUpdatesCallbackNative.UpdatesNeeded">
            <unmanaged>HRESULT IVirtualSurfaceUpdatesCallbackNative::UpdatesNeeded()</unmanaged>
            <unmanaged-short>IVirtualSurfaceUpdatesCallbackNative::UpdatesNeeded</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.AdapterDescription">
            <unmanaged>DXGI_ADAPTER_DESC</unmanaged>
            <unmanaged-short>DXGI_ADAPTER_DESC</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.AdapterDescription.Description">
            <unmanaged>Description</unmanaged>
            <unmanaged-short>Description</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.AdapterDescription.VendorId">
            <unmanaged>VendorId</unmanaged>
            <unmanaged-short>VendorId</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.AdapterDescription.DeviceId">
            <unmanaged>DeviceId</unmanaged>
            <unmanaged-short>DeviceId</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.AdapterDescription.SubsystemId">
            <unmanaged>SubSysId</unmanaged>
            <unmanaged-short>SubSysId</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.AdapterDescription.Revision">
            <unmanaged>Revision</unmanaged>
            <unmanaged-short>Revision</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.AdapterDescription.DedicatedVideoMemory">
            <unmanaged>DedicatedVideoMemory</unmanaged>
            <unmanaged-short>DedicatedVideoMemory</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.AdapterDescription.DedicatedSystemMemory">
            <unmanaged>DedicatedSystemMemory</unmanaged>
            <unmanaged-short>DedicatedSystemMemory</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.AdapterDescription.SharedSystemMemory">
            <unmanaged>SharedSystemMemory</unmanaged>
            <unmanaged-short>SharedSystemMemory</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.AdapterDescription.Luid">
            <unmanaged>AdapterLuid</unmanaged>
            <unmanaged-short>AdapterLuid</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.AdapterDescription1">
            <unmanaged>DXGI_ADAPTER_DESC1</unmanaged>
            <unmanaged-short>DXGI_ADAPTER_DESC1</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.AdapterDescription1.Description">
            <unmanaged>Description</unmanaged>
            <unmanaged-short>Description</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.AdapterDescription1.VendorId">
            <unmanaged>VendorId</unmanaged>
            <unmanaged-short>VendorId</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.AdapterDescription1.DeviceId">
            <unmanaged>DeviceId</unmanaged>
            <unmanaged-short>DeviceId</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.AdapterDescription1.SubsystemId">
            <unmanaged>SubSysId</unmanaged>
            <unmanaged-short>SubSysId</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.AdapterDescription1.Revision">
            <unmanaged>Revision</unmanaged>
            <unmanaged-short>Revision</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.AdapterDescription1.DedicatedVideoMemory">
            <unmanaged>DedicatedVideoMemory</unmanaged>
            <unmanaged-short>DedicatedVideoMemory</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.AdapterDescription1.DedicatedSystemMemory">
            <unmanaged>DedicatedSystemMemory</unmanaged>
            <unmanaged-short>DedicatedSystemMemory</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.AdapterDescription1.SharedSystemMemory">
            <unmanaged>SharedSystemMemory</unmanaged>
            <unmanaged-short>SharedSystemMemory</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.AdapterDescription1.Luid">
            <unmanaged>AdapterLuid</unmanaged>
            <unmanaged-short>AdapterLuid</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.AdapterDescription1.Flags">
            <unmanaged>Flags</unmanaged>
            <unmanaged-short>Flags</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.AdapterDescription2">
            <unmanaged>DXGI_ADAPTER_DESC2</unmanaged>
            <unmanaged-short>DXGI_ADAPTER_DESC2</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.AdapterDescription2.Description">
            <unmanaged>Description</unmanaged>
            <unmanaged-short>Description</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.AdapterDescription2.VendorId">
            <unmanaged>VendorId</unmanaged>
            <unmanaged-short>VendorId</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.AdapterDescription2.DeviceId">
            <unmanaged>DeviceId</unmanaged>
            <unmanaged-short>DeviceId</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.AdapterDescription2.SubsystemId">
            <unmanaged>SubSysId</unmanaged>
            <unmanaged-short>SubSysId</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.AdapterDescription2.Revision">
            <unmanaged>Revision</unmanaged>
            <unmanaged-short>Revision</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.AdapterDescription2.DedicatedVideoMemory">
            <unmanaged>DedicatedVideoMemory</unmanaged>
            <unmanaged-short>DedicatedVideoMemory</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.AdapterDescription2.DedicatedSystemMemory">
            <unmanaged>DedicatedSystemMemory</unmanaged>
            <unmanaged-short>DedicatedSystemMemory</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.AdapterDescription2.SharedSystemMemory">
            <unmanaged>SharedSystemMemory</unmanaged>
            <unmanaged-short>SharedSystemMemory</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.AdapterDescription2.Luid">
            <unmanaged>AdapterLuid</unmanaged>
            <unmanaged-short>AdapterLuid</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.AdapterDescription2.Flags">
            <unmanaged>Flags</unmanaged>
            <unmanaged-short>Flags</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.AdapterDescription2.GraphicsPreemptionGranularity">
            <unmanaged>GraphicsPreemptionGranularity</unmanaged>
            <unmanaged-short>GraphicsPreemptionGranularity</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.AdapterDescription2.ComputePreemptionGranularity">
            <unmanaged>ComputePreemptionGranularity</unmanaged>
            <unmanaged-short>ComputePreemptionGranularity</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.AdapterDescription3">
            <unmanaged>DXGI_ADAPTER_DESC3</unmanaged>
            <unmanaged-short>DXGI_ADAPTER_DESC3</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.AdapterDescription3.Description">
            <unmanaged>Description</unmanaged>
            <unmanaged-short>Description</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.AdapterDescription3.VendorId">
            <unmanaged>VendorId</unmanaged>
            <unmanaged-short>VendorId</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.AdapterDescription3.DeviceId">
            <unmanaged>DeviceId</unmanaged>
            <unmanaged-short>DeviceId</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.AdapterDescription3.SubsystemId">
            <unmanaged>SubSysId</unmanaged>
            <unmanaged-short>SubSysId</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.AdapterDescription3.Revision">
            <unmanaged>Revision</unmanaged>
            <unmanaged-short>Revision</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.AdapterDescription3.DedicatedVideoMemory">
            <unmanaged>DedicatedVideoMemory</unmanaged>
            <unmanaged-short>DedicatedVideoMemory</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.AdapterDescription3.DedicatedSystemMemory">
            <unmanaged>DedicatedSystemMemory</unmanaged>
            <unmanaged-short>DedicatedSystemMemory</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.AdapterDescription3.SharedSystemMemory">
            <unmanaged>SharedSystemMemory</unmanaged>
            <unmanaged-short>SharedSystemMemory</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.AdapterDescription3.Luid">
            <unmanaged>AdapterLuid</unmanaged>
            <unmanaged-short>AdapterLuid</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.AdapterDescription3.Flags">
            <unmanaged>Flags</unmanaged>
            <unmanaged-short>Flags</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.AdapterDescription3.GraphicsPreemptionGranularity">
            <unmanaged>GraphicsPreemptionGranularity</unmanaged>
            <unmanaged-short>GraphicsPreemptionGranularity</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.AdapterDescription3.ComputePreemptionGranularity">
            <unmanaged>ComputePreemptionGranularity</unmanaged>
            <unmanaged-short>ComputePreemptionGranularity</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.DecodeSwapChainDescription">
            <unmanaged>DXGI_DECODE_SWAP_CHAIN_DESC</unmanaged>
            <unmanaged-short>DXGI_DECODE_SWAP_CHAIN_DESC</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.DecodeSwapChainDescription.Flags">
            <unmanaged>Flags</unmanaged>
            <unmanaged-short>Flags</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.DisplayColorSpace">
            <unmanaged>DXGI_DISPLAY_COLOR_SPACE</unmanaged>
            <unmanaged-short>DXGI_DISPLAY_COLOR_SPACE</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.DisplayColorSpace.PrimaryCoordinates">
            <unmanaged>PrimaryCoordinates</unmanaged>
            <unmanaged-short>PrimaryCoordinates</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.DisplayColorSpace.WhitePoints">
            <unmanaged>WhitePoints</unmanaged>
            <unmanaged-short>WhitePoints</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.FrameStatistics">
            <unmanaged>DXGI_FRAME_STATISTICS</unmanaged>
            <unmanaged-short>DXGI_FRAME_STATISTICS</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.FrameStatistics.PresentCount">
            <unmanaged>PresentCount</unmanaged>
            <unmanaged-short>PresentCount</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.FrameStatistics.PresentRefreshCount">
            <unmanaged>PresentRefreshCount</unmanaged>
            <unmanaged-short>PresentRefreshCount</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.FrameStatistics.SyncRefreshCount">
            <unmanaged>SyncRefreshCount</unmanaged>
            <unmanaged-short>SyncRefreshCount</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.FrameStatistics.SyncQPCTime">
            <unmanaged>SyncQPCTime</unmanaged>
            <unmanaged-short>SyncQPCTime</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.FrameStatistics.SyncGPUTime">
            <unmanaged>SyncGPUTime</unmanaged>
            <unmanaged-short>SyncGPUTime</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.FrameStatisticsMedia">
            <unmanaged>DXGI_FRAME_STATISTICS_MEDIA</unmanaged>
            <unmanaged-short>DXGI_FRAME_STATISTICS_MEDIA</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.FrameStatisticsMedia.PresentCount">
            <unmanaged>PresentCount</unmanaged>
            <unmanaged-short>PresentCount</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.FrameStatisticsMedia.PresentRefreshCount">
            <unmanaged>PresentRefreshCount</unmanaged>
            <unmanaged-short>PresentRefreshCount</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.FrameStatisticsMedia.SyncRefreshCount">
            <unmanaged>SyncRefreshCount</unmanaged>
            <unmanaged-short>SyncRefreshCount</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.FrameStatisticsMedia.SyncQPCTime">
            <unmanaged>SyncQPCTime</unmanaged>
            <unmanaged-short>SyncQPCTime</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.FrameStatisticsMedia.SyncGPUTime">
            <unmanaged>SyncGPUTime</unmanaged>
            <unmanaged-short>SyncGPUTime</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.FrameStatisticsMedia.CompositionMode">
            <unmanaged>CompositionMode</unmanaged>
            <unmanaged-short>CompositionMode</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.FrameStatisticsMedia.ApprovedPresentDuration">
            <unmanaged>ApprovedPresentDuration</unmanaged>
            <unmanaged-short>ApprovedPresentDuration</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.HdrMetadataHdr10">
            <unmanaged>DXGI_HDR_METADATA_HDR10</unmanaged>
            <unmanaged-short>DXGI_HDR_METADATA_HDR10</unmanaged-short>
        </member>
        <member name="P:Vortice.DXGI.HdrMetadataHdr10.RedPrimary">
            <unmanaged>RedPrimary</unmanaged>
            <unmanaged-short>RedPrimary</unmanaged-short>
        </member>
        <member name="P:Vortice.DXGI.HdrMetadataHdr10.GreenPrimary">
            <unmanaged>GreenPrimary</unmanaged>
            <unmanaged-short>GreenPrimary</unmanaged-short>
        </member>
        <member name="P:Vortice.DXGI.HdrMetadataHdr10.BluePrimary">
            <unmanaged>BluePrimary</unmanaged>
            <unmanaged-short>BluePrimary</unmanaged-short>
        </member>
        <member name="P:Vortice.DXGI.HdrMetadataHdr10.WhitePoint">
            <unmanaged>WhitePoint</unmanaged>
            <unmanaged-short>WhitePoint</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.HdrMetadataHdr10.MaxMasteringLuminance">
            <unmanaged>MaxMasteringLuminance</unmanaged>
            <unmanaged-short>MaxMasteringLuminance</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.HdrMetadataHdr10.MinMasteringLuminance">
            <unmanaged>MinMasteringLuminance</unmanaged>
            <unmanaged-short>MinMasteringLuminance</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.HdrMetadataHdr10.MaxContentLightLevel">
            <unmanaged>MaxContentLightLevel</unmanaged>
            <unmanaged-short>MaxContentLightLevel</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.HdrMetadataHdr10.MaxFrameAverageLightLevel">
            <unmanaged>MaxFrameAverageLightLevel</unmanaged>
            <unmanaged-short>MaxFrameAverageLightLevel</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.HdrMetadataHdr10plus">
            <unmanaged>DXGI_HDR_METADATA_HDR10PLUS</unmanaged>
            <unmanaged-short>DXGI_HDR_METADATA_HDR10PLUS</unmanaged-short>
        </member>
        <member name="P:Vortice.DXGI.HdrMetadataHdr10plus.Data">
            <unmanaged>Data</unmanaged>
            <unmanaged-short>Data</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.MappedRect">
            <unmanaged>DXGI_MAPPED_RECT</unmanaged>
            <unmanaged-short>DXGI_MAPPED_RECT</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.MappedRect.Pitch">
            <unmanaged>Pitch</unmanaged>
            <unmanaged-short>Pitch</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.MappedRect.Bits">
            <unmanaged>pBits</unmanaged>
            <unmanaged-short>pBits</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.ModeDescription1">
            <unmanaged>DXGI_MODE_DESC1</unmanaged>
            <unmanaged-short>DXGI_MODE_DESC1</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.ModeDescription1.Width">
            <unmanaged>Width</unmanaged>
            <unmanaged-short>Width</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.ModeDescription1.Height">
            <unmanaged>Height</unmanaged>
            <unmanaged-short>Height</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.ModeDescription1.RefreshRate">
            <unmanaged>RefreshRate</unmanaged>
            <unmanaged-short>RefreshRate</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.ModeDescription1.Format">
            <unmanaged>Format</unmanaged>
            <unmanaged-short>Format</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.ModeDescription1.ScanlineOrdering">
            <unmanaged>ScanlineOrdering</unmanaged>
            <unmanaged-short>ScanlineOrdering</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.ModeDescription1.Scaling">
            <unmanaged>Scaling</unmanaged>
            <unmanaged-short>Scaling</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.ModeDescription1.Stereo">
            <unmanaged>Stereo</unmanaged>
            <unmanaged-short>Stereo</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.OutduplDescription">
            <unmanaged>DXGI_OUTDUPL_DESC</unmanaged>
            <unmanaged-short>DXGI_OUTDUPL_DESC</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.OutduplDescription.ModeDescription">
            <unmanaged>ModeDesc</unmanaged>
            <unmanaged-short>ModeDesc</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.OutduplDescription.Rotation">
            <unmanaged>Rotation</unmanaged>
            <unmanaged-short>Rotation</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.OutduplDescription.DesktopImageInSystemMemory">
            <unmanaged>DesktopImageInSystemMemory</unmanaged>
            <unmanaged-short>DesktopImageInSystemMemory</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.OutduplFrameInfo">
            <unmanaged>DXGI_OUTDUPL_FRAME_INFO</unmanaged>
            <unmanaged-short>DXGI_OUTDUPL_FRAME_INFO</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.OutduplFrameInfo.LastPresentTime">
            <unmanaged>LastPresentTime</unmanaged>
            <unmanaged-short>LastPresentTime</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.OutduplFrameInfo.LastMouseUpdateTime">
            <unmanaged>LastMouseUpdateTime</unmanaged>
            <unmanaged-short>LastMouseUpdateTime</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.OutduplFrameInfo.AccumulatedFrames">
            <unmanaged>AccumulatedFrames</unmanaged>
            <unmanaged-short>AccumulatedFrames</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.OutduplFrameInfo.RectsCoalesced">
            <unmanaged>RectsCoalesced</unmanaged>
            <unmanaged-short>RectsCoalesced</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.OutduplFrameInfo.ProtectedContentMaskedOut">
            <unmanaged>ProtectedContentMaskedOut</unmanaged>
            <unmanaged-short>ProtectedContentMaskedOut</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.OutduplFrameInfo.PointerPosition">
            <unmanaged>PointerPosition</unmanaged>
            <unmanaged-short>PointerPosition</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.OutduplFrameInfo.TotalMetadataBufferSize">
            <unmanaged>TotalMetadataBufferSize</unmanaged>
            <unmanaged-short>TotalMetadataBufferSize</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.OutduplFrameInfo.PointerShapeBufferSize">
            <unmanaged>PointerShapeBufferSize</unmanaged>
            <unmanaged-short>PointerShapeBufferSize</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.OutduplMoveRect">
            <unmanaged>DXGI_OUTDUPL_MOVE_RECT</unmanaged>
            <unmanaged-short>DXGI_OUTDUPL_MOVE_RECT</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.OutduplMoveRect.SourcePoint">
            <unmanaged>SourcePoint</unmanaged>
            <unmanaged-short>SourcePoint</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.OutduplMoveRect.DestinationRect">
            <unmanaged>DestinationRect</unmanaged>
            <unmanaged-short>DestinationRect</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.OutduplPointerPosition">
            <unmanaged>DXGI_OUTDUPL_POINTER_POSITION</unmanaged>
            <unmanaged-short>DXGI_OUTDUPL_POINTER_POSITION</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.OutduplPointerPosition.Position">
            <unmanaged>Position</unmanaged>
            <unmanaged-short>Position</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.OutduplPointerPosition.Visible">
            <unmanaged>Visible</unmanaged>
            <unmanaged-short>Visible</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.OutduplPointerShapeInfo">
            <unmanaged>DXGI_OUTDUPL_POINTER_SHAPE_INFO</unmanaged>
            <unmanaged-short>DXGI_OUTDUPL_POINTER_SHAPE_INFO</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.OutduplPointerShapeInfo.Type">
            <unmanaged>Type</unmanaged>
            <unmanaged-short>Type</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.OutduplPointerShapeInfo.Width">
            <unmanaged>Width</unmanaged>
            <unmanaged-short>Width</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.OutduplPointerShapeInfo.Height">
            <unmanaged>Height</unmanaged>
            <unmanaged-short>Height</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.OutduplPointerShapeInfo.Pitch">
            <unmanaged>Pitch</unmanaged>
            <unmanaged-short>Pitch</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.OutduplPointerShapeInfo.HotSpot">
            <unmanaged>HotSpot</unmanaged>
            <unmanaged-short>HotSpot</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.OutputDescription">
            <unmanaged>DXGI_OUTPUT_DESC</unmanaged>
            <unmanaged-short>DXGI_OUTPUT_DESC</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.OutputDescription.DeviceName">
            <unmanaged>DeviceName</unmanaged>
            <unmanaged-short>DeviceName</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.OutputDescription.DesktopCoordinates">
            <unmanaged>DesktopCoordinates</unmanaged>
            <unmanaged-short>DesktopCoordinates</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.OutputDescription.AttachedToDesktop">
            <unmanaged>AttachedToDesktop</unmanaged>
            <unmanaged-short>AttachedToDesktop</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.OutputDescription.Rotation">
            <unmanaged>Rotation</unmanaged>
            <unmanaged-short>Rotation</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.OutputDescription.Monitor">
            <unmanaged>Monitor</unmanaged>
            <unmanaged-short>Monitor</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.OutputDescription1">
            <unmanaged>DXGI_OUTPUT_DESC1</unmanaged>
            <unmanaged-short>DXGI_OUTPUT_DESC1</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.OutputDescription1.DeviceName">
            <unmanaged>DeviceName</unmanaged>
            <unmanaged-short>DeviceName</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.OutputDescription1.DesktopCoordinates">
            <unmanaged>DesktopCoordinates</unmanaged>
            <unmanaged-short>DesktopCoordinates</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.OutputDescription1.AttachedToDesktop">
            <unmanaged>AttachedToDesktop</unmanaged>
            <unmanaged-short>AttachedToDesktop</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.OutputDescription1.Rotation">
            <unmanaged>Rotation</unmanaged>
            <unmanaged-short>Rotation</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.OutputDescription1.Monitor">
            <unmanaged>Monitor</unmanaged>
            <unmanaged-short>Monitor</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.OutputDescription1.BitsPerColor">
            <unmanaged>BitsPerColor</unmanaged>
            <unmanaged-short>BitsPerColor</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.OutputDescription1.ColorSpace">
            <unmanaged>ColorSpace</unmanaged>
            <unmanaged-short>ColorSpace</unmanaged-short>
        </member>
        <member name="P:Vortice.DXGI.OutputDescription1.RedPrimary">
            <unmanaged>RedPrimary</unmanaged>
            <unmanaged-short>RedPrimary</unmanaged-short>
        </member>
        <member name="P:Vortice.DXGI.OutputDescription1.GreenPrimary">
            <unmanaged>GreenPrimary</unmanaged>
            <unmanaged-short>GreenPrimary</unmanaged-short>
        </member>
        <member name="P:Vortice.DXGI.OutputDescription1.BluePrimary">
            <unmanaged>BluePrimary</unmanaged>
            <unmanaged-short>BluePrimary</unmanaged-short>
        </member>
        <member name="P:Vortice.DXGI.OutputDescription1.WhitePoint">
            <unmanaged>WhitePoint</unmanaged>
            <unmanaged-short>WhitePoint</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.OutputDescription1.MinLuminance">
            <unmanaged>MinLuminance</unmanaged>
            <unmanaged-short>MinLuminance</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.OutputDescription1.MaxLuminance">
            <unmanaged>MaxLuminance</unmanaged>
            <unmanaged-short>MaxLuminance</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.OutputDescription1.MaxFullFrameLuminance">
            <unmanaged>MaxFullFrameLuminance</unmanaged>
            <unmanaged-short>MaxFullFrameLuminance</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.QueryVideoMemoryInfo">
            <unmanaged>DXGI_QUERY_VIDEO_MEMORY_INFO</unmanaged>
            <unmanaged-short>DXGI_QUERY_VIDEO_MEMORY_INFO</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.QueryVideoMemoryInfo.Budget">
            <unmanaged>Budget</unmanaged>
            <unmanaged-short>Budget</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.QueryVideoMemoryInfo.CurrentUsage">
            <unmanaged>CurrentUsage</unmanaged>
            <unmanaged-short>CurrentUsage</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.QueryVideoMemoryInfo.AvailableForReservation">
            <unmanaged>AvailableForReservation</unmanaged>
            <unmanaged-short>AvailableForReservation</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.QueryVideoMemoryInfo.CurrentReservation">
            <unmanaged>CurrentReservation</unmanaged>
            <unmanaged-short>CurrentReservation</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.SharedResource">
            <unmanaged>DXGI_SHARED_RESOURCE</unmanaged>
            <unmanaged-short>DXGI_SHARED_RESOURCE</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.SharedResource.Handle">
            <unmanaged>Handle</unmanaged>
            <unmanaged-short>Handle</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.SurfaceDescription">
            <unmanaged>DXGI_SURFACE_DESC</unmanaged>
            <unmanaged-short>DXGI_SURFACE_DESC</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.SurfaceDescription.Width">
            <unmanaged>Width</unmanaged>
            <unmanaged-short>Width</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.SurfaceDescription.Height">
            <unmanaged>Height</unmanaged>
            <unmanaged-short>Height</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.SurfaceDescription.Format">
            <unmanaged>Format</unmanaged>
            <unmanaged-short>Format</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.SurfaceDescription.SampleDescription">
            <unmanaged>SampleDesc</unmanaged>
            <unmanaged-short>SampleDesc</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.SwapChainDescription">
            <unmanaged>DXGI_SWAP_CHAIN_DESC</unmanaged>
            <unmanaged-short>DXGI_SWAP_CHAIN_DESC</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.SwapChainDescription.BufferDescription">
            <unmanaged>BufferDesc</unmanaged>
            <unmanaged-short>BufferDesc</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.SwapChainDescription.SampleDescription">
            <unmanaged>SampleDesc</unmanaged>
            <unmanaged-short>SampleDesc</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.SwapChainDescription.BufferUsage">
            <unmanaged>BufferUsage</unmanaged>
            <unmanaged-short>BufferUsage</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.SwapChainDescription.BufferCount">
            <unmanaged>BufferCount</unmanaged>
            <unmanaged-short>BufferCount</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.SwapChainDescription.OutputWindow">
            <unmanaged>OutputWindow</unmanaged>
            <unmanaged-short>OutputWindow</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.SwapChainDescription.Windowed">
            <unmanaged>Windowed</unmanaged>
            <unmanaged-short>Windowed</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.SwapChainDescription.SwapEffect">
            <unmanaged>SwapEffect</unmanaged>
            <unmanaged-short>SwapEffect</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.SwapChainDescription.Flags">
            <unmanaged>Flags</unmanaged>
            <unmanaged-short>Flags</unmanaged-short>
        </member>
        <member name="T:Vortice.DXGI.SwapChainFullscreenDescription">
            <unmanaged>DXGI_SWAP_CHAIN_FULLSCREEN_DESC</unmanaged>
            <unmanaged-short>DXGI_SWAP_CHAIN_FULLSCREEN_DESC</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.SwapChainFullscreenDescription.RefreshRate">
            <unmanaged>RefreshRate</unmanaged>
            <unmanaged-short>RefreshRate</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.SwapChainFullscreenDescription.ScanlineOrdering">
            <unmanaged>ScanlineOrdering</unmanaged>
            <unmanaged-short>ScanlineOrdering</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.SwapChainFullscreenDescription.Scaling">
            <unmanaged>Scaling</unmanaged>
            <unmanaged-short>Scaling</unmanaged-short>
        </member>
        <member name="F:Vortice.DXGI.SwapChainFullscreenDescription.Windowed">
            <unmanaged>Windowed</unmanaged>
            <unmanaged-short>Windowed</unmanaged-short>
        </member>
    </members>
</doc>
